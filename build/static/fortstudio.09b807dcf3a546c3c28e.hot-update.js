webpackHotUpdate("fortstudio",{

/***/ "./packages/mars-theme/src/components/footer.js":
/*!******************************************************!*\
  !*** ./packages/mars-theme/src/components/footer.js ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled-base */ \"./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _link__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./link */ \"./packages/mars-theme/src/components/link.js\");\n/* harmony import */ var _partials_card__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./partials/card */ \"./packages/mars-theme/src/components/partials/card.js\");\n/* harmony import */ var _partials_FooterVideoPlayer__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./partials/FooterVideoPlayer */ \"./packages/mars-theme/src/components/partials/FooterVideoPlayer.js\");\n/* harmony import */ var _partials_centeredCard__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./partials/centeredCard */ \"./packages/mars-theme/src/components/partials/centeredCard.js\");\n/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @emotion/core */ \"./node_modules/@emotion/core/dist/core.browser.esm.js\");\nfunction _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}class Footer extends react__WEBPACK_IMPORTED_MODULE_1__[\"Component\"]{constructor(props){super(props);}isOnScreen(){/* get the elements */var elements=document.getElementsByClassName(\"spy\");/* iterate */Array.prototype.forEach.call(elements,function(element,index){var bounds=element.getBoundingClientRect();if(bounds.top<window.innerHeight&&bounds.bottom>0){element.classList.add(\"inview\");}else{// element.classList.remove(\"inview\");\n}});window.setTimeout(this.isOnScreen.bind(this),250);}componentDidMount(){window.setTimeout(this.isOnScreen.bind(this),250);window.onscroll=function(){var stickyfooter=document.querySelector(\"#stuck\");var pageHeight=document.documentElement.offsetHeight,windowHeight=window.innerHeight,scrollPosition=window.scrollY||window.pageYOffset||document.body.scrollTop+(document.documentElement&&document.documentElement.scrollTop||0);if(pageHeight<=windowHeight+scrollPosition){stickyfooter.classList.add(\"at-bottom\");}else{stickyfooter.classList.remove(\"at-bottom\");}};}render(){var options=this.props.state.source.get(\"acf-options-page\");return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(FooterContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(TopWrapper,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(TopFooter,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(Tout,{className:\"spy\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"h4\",null,options.acf.footer_section.hire_headline),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"p\",{className:\"p1\",dangerouslySetInnerHTML:{__html:options.acf.footer_section.hire_body}}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(_partials_card__WEBPACK_IMPORTED_MODULE_4__[\"default\"],{target:\"_blank\",linkURL:\"mailto:projects@fortyeah.com\",linkText:options.acf.footer_section.hire_cta_text})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(Tout,{className:\"spy\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"h4\",null,options.acf.footer_section.request_work_headline),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"p\",{className:\"p1\",dangerouslySetInnerHTML:{__html:options.acf.footer_section.request_work_body}}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(_partials_card__WEBPACK_IMPORTED_MODULE_4__[\"default\"],{linkURL:\"/contact\",linkText:options.acf.footer_section.request_work_cta_text})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(Tout,{className:\"spy\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"h4\",null,options.acf.footer_section.careers_headline),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"p\",{className:\"p1\",dangerouslySetInnerHTML:{__html:options.acf.footer_section.careers_body}}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(_partials_card__WEBPACK_IMPORTED_MODULE_4__[\"default\"],{linkURL:\"mailto:careers@fortyeah.com\",linkText:options.acf.footer_section.careers_cta_text})))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(BottomWrapper,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(BottomFooter,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(CenterContainer,{link:\"/\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"svg\",{xmlns:\"http://www.w3.org/2000/svg\",width:\"24.463\",height:\"52.227\",viewBox:\"0 0 24.463 52.227\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(\"path\",{id:\"logo-f_short\",d:\"M23.169,43.011H0v9.216H23.169Zm-12.8-33.8H24.463V0H0V33.8H10.369V23.812h12.8V14.593h-12.8Z\",fill:\"#1d1d1d\"}))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(LeftContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(SocialContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(StyledSocialLink,{target:options.acf.social_section.instagram.target,link:options.acf.social_section.instagram.url},options.acf.social_section.instagram.title),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(StyledSocialLink,{target:options.acf.social_section.dribble.target,link:options.acf.social_section.dribble.url},options.acf.social_section.dribble.title),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(StyledSocialLink,{target:options.acf.social_section.linkedin.target,link:options.acf.social_section.linkedin.url},options.acf.social_section.linkedin.title)),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(ContactContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(Address,{href:'https://www.google.com/maps/place/'+options.acf.social_section.addressreplace(/<[^>]*>?/gm,''),target:\"_blank\",dangerouslySetInnerHTML:{__html:options.acf.social_section.address}}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(Phone,{target:\"_blank\",link:\"tel:\"+options.acf.social_section.phone_number_field},options.acf.social_section.phone_number_field))),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(RightContainer,null,Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(RightWrapper,{id:\"stuck\",className:this.props.activeTout},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(StyledCard,{linkURL:\"/reel\",activeTout:this.props.activeTout,linkText:options.acf.footer_cta_text.reel_text}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(StyledCard,{linkURL:\"/contact\",activeTout:this.props.activeTout,linkText:options.acf.footer_cta_text.work_sample_form_text})),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(NotFixedContainer,{className:this.props.activeTout},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(StyledCard,{linkURL:\"/reel\",activeTout:this.props.activeTout,linkText:options.acf.footer_cta_text.reel_text}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_7__[\"jsx\"])(StyledCard,{linkURL:\"/contact\",activeTout:this.props.activeTout,linkText:options.acf.footer_cta_text.work_sample_form_text}))))));}}/* harmony default export */ __webpack_exports__[\"default\"] = (Object(frontity__WEBPACK_IMPORTED_MODULE_2__[\"connect\"])(Footer));var Container=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e8kjvma0\",label:\"Container\"})( false?undefined:{name:\"am5mni\",styles:\"width:1440px;max-width:100%;box-sizing:border-box;padding:24px 0;display:flex;justify-content:space-around;margin:auto;@media (max-width:1024px){width:auto;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkU6XFxEZXZcXEZPUlRcXEZvcnRTdHVkaW8yMDE5XFxwYWNrYWdlc1xcbWFycy10aGVtZVxcc3JjXFxjb21wb25lbnRzXFxmb290ZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBOEw0QiIsImZpbGUiOiJFOlxcRGV2XFxGT1JUXFxGb3J0U3R1ZGlvMjAxOVxccGFja2FnZXNcXG1hcnMtdGhlbWVcXHNyY1xcY29tcG9uZW50c1xcZm9vdGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBjb25uZWN0LCBzdHlsZWQgfSBmcm9tIFwiZnJvbnRpdHlcIjtcclxuaW1wb3J0IExpbmsgZnJvbSBcIi4vbGlua1wiO1xyXG5pbXBvcnQgQ2FyZCBmcm9tIFwiLi9wYXJ0aWFscy9jYXJkXCI7XHJcbmltcG9ydCBGb290ZXJWaWRlb1BsYXllciBmcm9tIFwiLi9wYXJ0aWFscy9Gb290ZXJWaWRlb1BsYXllclwiO1xyXG5pbXBvcnQgQ2VudGVyZWRDYXJkIGZyb20gXCIuL3BhcnRpYWxzL2NlbnRlcmVkQ2FyZFwiO1xyXG5jbGFzcyBGb290ZXIgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgfVxyXG5cclxuICBpc09uU2NyZWVuKCkge1xyXG4gICAgLyogZ2V0IHRoZSBlbGVtZW50cyAqL1xyXG4gICAgdmFyIGVsZW1lbnRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcInNweVwiKTtcclxuICAgIC8qIGl0ZXJhdGUgKi9cclxuICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoZWxlbWVudHMsIGZ1bmN0aW9uKGVsZW1lbnQsIGluZGV4KSB7XHJcbiAgICAgIHZhciBib3VuZHMgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cclxuICAgICAgaWYgKGJvdW5kcy50b3AgPCB3aW5kb3cuaW5uZXJIZWlnaHQgJiYgYm91bmRzLmJvdHRvbSA+IDApIHtcclxuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJpbnZpZXdcIik7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiaW52aWV3XCIpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICB3aW5kb3cuc2V0VGltZW91dCh0aGlzLmlzT25TY3JlZW4uYmluZCh0aGlzKSwgMjUwKTtcclxuICB9XHJcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICB3aW5kb3cuc2V0VGltZW91dCh0aGlzLmlzT25TY3JlZW4uYmluZCh0aGlzKSwgMjUwKTsgIFxyXG4gICAgd2luZG93Lm9uc2Nyb2xsID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciBzdGlja3lmb290ZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3N0dWNrXCIpO1xyXG4gICAgICB2YXIgcGFnZUhlaWdodCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5vZmZzZXRIZWlnaHQsXHJcbiAgICAgICAgd2luZG93SGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0LFxyXG4gICAgICAgIHNjcm9sbFBvc2l0aW9uID1cclxuICAgICAgICAgIHdpbmRvdy5zY3JvbGxZIHx8XHJcbiAgICAgICAgICB3aW5kb3cucGFnZVlPZmZzZXQgfHxcclxuICAgICAgICAgIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wICtcclxuICAgICAgICAgICAgKChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCkgfHxcclxuICAgICAgICAgICAgICAwKTtcclxuXHJcblxyXG4gICAgICBpZiAocGFnZUhlaWdodCA8PSB3aW5kb3dIZWlnaHQgKyBzY3JvbGxQb3NpdGlvbikge1xyXG4gICAgICAgICBzdGlja3lmb290ZXIuY2xhc3NMaXN0LmFkZChcImF0LWJvdHRvbVwiKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBzdGlja3lmb290ZXIuY2xhc3NMaXN0LnJlbW92ZShcImF0LWJvdHRvbVwiKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcbiAgcmVuZGVyKCkge1xyXG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMucHJvcHMuc3RhdGUuc291cmNlLmdldChcImFjZi1vcHRpb25zLXBhZ2VcIik7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8Rm9vdGVyQ29udGFpbmVyPlxyXG4gICAgICAgIDxUb3BXcmFwcGVyPlxyXG4gICAgICAgICAgPFRvcEZvb3Rlcj5cclxuICAgICAgICAgICAgPFRvdXQgY2xhc3NOYW1lPVwic3B5XCI+XHJcbiAgICAgICAgICAgICAgPGg0PntvcHRpb25zLmFjZi5mb290ZXJfc2VjdGlvbi5oaXJlX2hlYWRsaW5lfTwvaDQ+XHJcbiAgICAgICAgICAgICAgPHBcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInAxXCJcclxuICAgICAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7XHJcbiAgICAgICAgICAgICAgICAgIF9faHRtbDogb3B0aW9ucy5hY2YuZm9vdGVyX3NlY3Rpb24uaGlyZV9ib2R5XHJcbiAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgID48L3A+XHJcbiAgICAgICAgICAgICAgPENhcmRcclxuICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXHJcbiAgICAgICAgICAgICAgICBsaW5rVVJMPVwibWFpbHRvOnByb2plY3RzQGZvcnR5ZWFoLmNvbVwiXHJcbiAgICAgICAgICAgICAgICBsaW5rVGV4dD17b3B0aW9ucy5hY2YuZm9vdGVyX3NlY3Rpb24uaGlyZV9jdGFfdGV4dH1cclxuICAgICAgICAgICAgICA+PC9DYXJkPlxyXG4gICAgICAgICAgICA8L1RvdXQ+XHJcbiAgICAgICAgICAgIDxUb3V0IGNsYXNzTmFtZT1cInNweVwiPlxyXG4gICAgICAgICAgICAgIDxoND57b3B0aW9ucy5hY2YuZm9vdGVyX3NlY3Rpb24ucmVxdWVzdF93b3JrX2hlYWRsaW5lfTwvaDQ+XHJcbiAgICAgICAgICAgICAgPHBcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInAxXCJcclxuICAgICAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7XHJcbiAgICAgICAgICAgICAgICAgIF9faHRtbDogb3B0aW9ucy5hY2YuZm9vdGVyX3NlY3Rpb24ucmVxdWVzdF93b3JrX2JvZHlcclxuICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgPjwvcD5cclxuICAgICAgICAgICAgICA8Q2FyZFxyXG4gICAgICAgICAgICAgICAgbGlua1VSTD1cIi9jb250YWN0XCJcclxuICAgICAgICAgICAgICAgIGxpbmtUZXh0PXtvcHRpb25zLmFjZi5mb290ZXJfc2VjdGlvbi5yZXF1ZXN0X3dvcmtfY3RhX3RleHR9XHJcbiAgICAgICAgICAgICAgPjwvQ2FyZD5cclxuICAgICAgICAgICAgPC9Ub3V0PlxyXG4gICAgICAgICAgICA8VG91dCBjbGFzc05hbWU9XCJzcHlcIj5cclxuICAgICAgICAgICAgICA8aDQ+e29wdGlvbnMuYWNmLmZvb3Rlcl9zZWN0aW9uLmNhcmVlcnNfaGVhZGxpbmV9PC9oND5cclxuICAgICAgICAgICAgICA8cFxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwicDFcIlxyXG4gICAgICAgICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tcclxuICAgICAgICAgICAgICAgICAgX19odG1sOiBvcHRpb25zLmFjZi5mb290ZXJfc2VjdGlvbi5jYXJlZXJzX2JvZHlcclxuICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgPjwvcD5cclxuICAgICAgICAgICAgICA8Q2FyZFxyXG4gICAgICAgICAgICAgICAgbGlua1VSTD1cIm1haWx0bzpjYXJlZXJzQGZvcnR5ZWFoLmNvbVwiXHJcbiAgICAgICAgICAgICAgICBsaW5rVGV4dD17b3B0aW9ucy5hY2YuZm9vdGVyX3NlY3Rpb24uY2FyZWVyc19jdGFfdGV4dH1cclxuICAgICAgICAgICAgICA+PC9DYXJkPlxyXG4gICAgICAgICAgICA8L1RvdXQ+XHJcbiAgICAgICAgICA8L1RvcEZvb3Rlcj5cclxuICAgICAgICA8L1RvcFdyYXBwZXI+XHJcbiAgICAgICAgPEJvdHRvbVdyYXBwZXI+XHJcbiAgICAgICAgICA8Qm90dG9tRm9vdGVyPlxyXG4gICAgICAgICAgICA8Q2VudGVyQ29udGFpbmVyIGxpbms9XCIvXCI+XHJcbiAgICAgICAgICAgICAgPHN2Z1xyXG4gICAgICAgICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXHJcbiAgICAgICAgICAgICAgICB3aWR0aD1cIjI0LjQ2M1wiXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ9XCI1Mi4yMjdcIlxyXG4gICAgICAgICAgICAgICAgdmlld0JveD1cIjAgMCAyNC40NjMgNTIuMjI3XCJcclxuICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8cGF0aFxyXG4gICAgICAgICAgICAgICAgICBpZD1cImxvZ28tZl9zaG9ydFwiXHJcbiAgICAgICAgICAgICAgICAgIGQ9XCJNMjMuMTY5LDQzLjAxMUgwdjkuMjE2SDIzLjE2OVptLTEyLjgtMzMuOEgyNC40NjNWMEgwVjMzLjhIMTAuMzY5VjIzLjgxMmgxMi44VjE0LjU5M2gtMTIuOFpcIlxyXG4gICAgICAgICAgICAgICAgICBmaWxsPVwiIzFkMWQxZFwiXHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgIDwvc3ZnPlxyXG4gICAgICAgICAgICA8L0NlbnRlckNvbnRhaW5lcj5cclxuICAgICAgICAgICAgPExlZnRDb250YWluZXI+XHJcbiAgICAgICAgICAgICAgPFNvY2lhbENvbnRhaW5lcj5cclxuICAgICAgICAgICAgICAgIDxTdHlsZWRTb2NpYWxMaW5rXHJcbiAgICAgICAgICAgICAgICAgIHRhcmdldD17b3B0aW9ucy5hY2Yuc29jaWFsX3NlY3Rpb24uaW5zdGFncmFtLnRhcmdldH1cclxuICAgICAgICAgICAgICAgICAgbGluaz17b3B0aW9ucy5hY2Yuc29jaWFsX3NlY3Rpb24uaW5zdGFncmFtLnVybH1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAge29wdGlvbnMuYWNmLnNvY2lhbF9zZWN0aW9uLmluc3RhZ3JhbS50aXRsZX1cclxuICAgICAgICAgICAgICAgIDwvU3R5bGVkU29jaWFsTGluaz5cclxuICAgICAgICAgICAgICAgIDxTdHlsZWRTb2NpYWxMaW5rXHJcbiAgICAgICAgICAgICAgICAgIHRhcmdldD17b3B0aW9ucy5hY2Yuc29jaWFsX3NlY3Rpb24uZHJpYmJsZS50YXJnZXR9XHJcbiAgICAgICAgICAgICAgICAgIGxpbms9e29wdGlvbnMuYWNmLnNvY2lhbF9zZWN0aW9uLmRyaWJibGUudXJsfVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICB7b3B0aW9ucy5hY2Yuc29jaWFsX3NlY3Rpb24uZHJpYmJsZS50aXRsZX1cclxuICAgICAgICAgICAgICAgIDwvU3R5bGVkU29jaWFsTGluaz5cclxuICAgICAgICAgICAgICAgIDxTdHlsZWRTb2NpYWxMaW5rXHJcbiAgICAgICAgICAgICAgICAgIHRhcmdldD17b3B0aW9ucy5hY2Yuc29jaWFsX3NlY3Rpb24ubGlua2VkaW4udGFyZ2V0fVxyXG4gICAgICAgICAgICAgICAgICBsaW5rPXtvcHRpb25zLmFjZi5zb2NpYWxfc2VjdGlvbi5saW5rZWRpbi51cmx9XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgIHtvcHRpb25zLmFjZi5zb2NpYWxfc2VjdGlvbi5saW5rZWRpbi50aXRsZX1cclxuICAgICAgICAgICAgICAgIDwvU3R5bGVkU29jaWFsTGluaz5cclxuICAgICAgICAgICAgICA8L1NvY2lhbENvbnRhaW5lcj5cclxuICAgICAgICAgICAgICA8Q29udGFjdENvbnRhaW5lcj5cclxuICAgICAgICAgICAgICAgIDxBZGRyZXNzXHJcbiAgICAgICAgICAgICAgICAgIGhyZWY9eydodHRwczovL3d3dy5nb29nbGUuY29tL21hcHMvcGxhY2UvJyArIG9wdGlvbnMuYWNmLnNvY2lhbF9zZWN0aW9uLmFkZHJlc3NyZXBsYWNlKC88W14+XSo+Py9nbSwgJycpfVxyXG4gICAgICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxyXG4gICAgICAgICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17e1xyXG4gICAgICAgICAgICAgICAgICAgIF9faHRtbDogb3B0aW9ucy5hY2Yuc29jaWFsX3NlY3Rpb24uYWRkcmVzc1xyXG4gICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgPjwvQWRkcmVzcz5cclxuICAgICAgICAgICAgICAgIDxQaG9uZVxyXG4gICAgICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxyXG4gICAgICAgICAgICAgICAgICBsaW5rPXtcInRlbDpcIiArIG9wdGlvbnMuYWNmLnNvY2lhbF9zZWN0aW9uLnBob25lX251bWJlcl9maWVsZH1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAge29wdGlvbnMuYWNmLnNvY2lhbF9zZWN0aW9uLnBob25lX251bWJlcl9maWVsZH1cclxuICAgICAgICAgICAgICAgIDwvUGhvbmU+XHJcbiAgICAgICAgICAgICAgPC9Db250YWN0Q29udGFpbmVyPlxyXG4gICAgICAgICAgICA8L0xlZnRDb250YWluZXI+XHJcbiAgICAgICAgICAgIDxSaWdodENvbnRhaW5lcj5cclxuICAgICAgICAgICAgICA8UmlnaHRXcmFwcGVyIGlkPVwic3R1Y2tcIiBjbGFzc05hbWU9e3RoaXMucHJvcHMuYWN0aXZlVG91dH0+XHJcbiAgICAgICAgICAgICAgICA8U3R5bGVkQ2FyZFxyXG4gICAgICAgICAgICAgICAgICBsaW5rVVJMPVwiL3JlZWxcIlxyXG4gICAgICAgICAgICAgICAgICBhY3RpdmVUb3V0PXt0aGlzLnByb3BzLmFjdGl2ZVRvdXR9XHJcbiAgICAgICAgICAgICAgICAgIGxpbmtUZXh0PXtvcHRpb25zLmFjZi5mb290ZXJfY3RhX3RleHQucmVlbF90ZXh0fVxyXG4gICAgICAgICAgICAgICAgPjwvU3R5bGVkQ2FyZD5cclxuICAgICAgICAgICAgICAgIHsvKiA8U3R5bGVkVmlkZW9QbGF5ZXJcclxuICAgICAgICAgICAgICAgICAgdG9nZ2xlPXt0aGlzLnByb3BzLnN0YXRlfVxyXG4gICAgICAgICAgICAgICAgICBzcmM9e29wdGlvbnMuYWNmLnZpZGVvW1widXJsXCJdfVxyXG4gICAgICAgICAgICAgICAgLz4gKi99XHJcbiAgICAgICAgICAgICAgICA8U3R5bGVkQ2FyZFxyXG4gICAgICAgICAgICAgICAgICBsaW5rVVJMPVwiL2NvbnRhY3RcIlxyXG4gICAgICAgICAgICAgICAgICBhY3RpdmVUb3V0PXt0aGlzLnByb3BzLmFjdGl2ZVRvdXR9XHJcbiAgICAgICAgICAgICAgICAgIGxpbmtUZXh0PXtvcHRpb25zLmFjZi5mb290ZXJfY3RhX3RleHQud29ya19zYW1wbGVfZm9ybV90ZXh0fVxyXG4gICAgICAgICAgICAgICAgPjwvU3R5bGVkQ2FyZD5cclxuICAgICAgICAgICAgICA8L1JpZ2h0V3JhcHBlcj5cclxuICAgICAgICAgICAgICA8Tm90Rml4ZWRDb250YWluZXIgY2xhc3NOYW1lPXt0aGlzLnByb3BzLmFjdGl2ZVRvdXR9PlxyXG4gICAgICAgICAgICAgICAgPFN0eWxlZENhcmRcclxuICAgICAgICAgICAgICAgICAgbGlua1VSTD1cIi9yZWVsXCJcclxuICAgICAgICAgICAgICAgICAgYWN0aXZlVG91dD17dGhpcy5wcm9wcy5hY3RpdmVUb3V0fVxyXG4gICAgICAgICAgICAgICAgICBsaW5rVGV4dD17b3B0aW9ucy5hY2YuZm9vdGVyX2N0YV90ZXh0LnJlZWxfdGV4dH1cclxuICAgICAgICAgICAgICAgID48L1N0eWxlZENhcmQ+XHJcblxyXG4gICAgICAgICAgICAgICAgPFN0eWxlZENhcmRcclxuICAgICAgICAgICAgICAgICAgbGlua1VSTD1cIi9jb250YWN0XCJcclxuICAgICAgICAgICAgICAgICAgYWN0aXZlVG91dD17dGhpcy5wcm9wcy5hY3RpdmVUb3V0fVxyXG4gICAgICAgICAgICAgICAgICBsaW5rVGV4dD17b3B0aW9ucy5hY2YuZm9vdGVyX2N0YV90ZXh0Lndvcmtfc2FtcGxlX2Zvcm1fdGV4dH1cclxuICAgICAgICAgICAgICAgID48L1N0eWxlZENhcmQ+XHJcbiAgICAgICAgICAgICAgPC9Ob3RGaXhlZENvbnRhaW5lcj5cclxuICAgICAgICAgICAgPC9SaWdodENvbnRhaW5lcj5cclxuICAgICAgICAgIDwvQm90dG9tRm9vdGVyPlxyXG4gICAgICAgIDwvQm90dG9tV3JhcHBlcj5cclxuICAgICAgPC9Gb290ZXJDb250YWluZXI+XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChGb290ZXIpO1xyXG5cclxuY29uc3QgQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICB3aWR0aDogMTQ0MHB4O1xyXG4gIG1heC13aWR0aDogMTAwJTtcclxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG4gIHBhZGRpbmc6IDI0cHggMDtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xyXG4gIG1hcmdpbjogYXV0bztcclxuICBAbWVkaWEgKG1heC13aWR0aDogMTAyNHB4KSB7XHJcbiAgICB3aWR0aDogYXV0bztcclxuICB9XHJcbmA7XHJcblxyXG5jb25zdCBUaXRsZSA9IHN0eWxlZC5oMmBcclxuICBtYXJnaW46IDA7XHJcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcclxuYDtcclxuY29uc3QgU3R5bGVkQ2FyZCA9IHN0eWxlZChDZW50ZXJlZENhcmQpYFxyXG4gIG1hcmdpbi1yaWdodDogMTBweDtcclxuYDtcclxuXHJcbmNvbnN0IFN0eWxlZExpbmsgPSBzdHlsZWQoTGluaylgXHJcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XHJcbmA7XHJcbmNvbnN0IEZvb3RlckNvbnRhaW5lciA9IHN0eWxlZC5kaXZgYDtcclxuY29uc3QgTm90Rml4ZWRDb250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgLmxpbmsge1xyXG4gICAgJi5maXJzdCB7XHJcbiAgICAgICY6Zmlyc3Qtb2YtdHlwZSB7XHJcbiAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgJi5sYXN0IHtcclxuICAgICAgJjpsYXN0LW9mLXR5cGUge1xyXG4gICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMjRweCkge1xyXG4gICAgZGlzcGxheTogbm9uZTtcclxuICB9XHJcbmA7XHJcbmNvbnN0IFRvcEZvb3RlciA9IHN0eWxlZC5kaXZgXHJcbiAgZGlzcGxheTogZmxleDtcclxuICBtYXgtd2lkdGg6IDE0NDBweDtcclxuICB3aWR0aDogMTAwJTtcclxuICBtYXJnaW46IGF1dG87XHJcbiAgcGFkZGluZy10b3A6IDEyNXB4O1xyXG4gIHBhZGRpbmctYm90dG9tOiAxMjVweDtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMjRweCkge1xyXG4gICAgZmxleC13cmFwOiB3cmFwO1xyXG4gICAgcGFkZGluZy1sZWZ0OiA2MHB4O1xyXG4gICAgcGFkZGluZy1yaWdodDogNjBweDtcclxuICAgIHdpZHRoOiBhdXRvO1xyXG4gIH1cclxuICBAbWVkaWEgKG1heC13aWR0aDogNDgwcHgpIHtcclxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgICBwYWRkaW5nOiAwO1xyXG4gICAgcGFkZGluZy10b3A6IDYwcHg7XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogNjBweDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gIH1cclxuYDtcclxuY29uc3QgU3R5bGVkVmlkZW9QbGF5ZXIgPSBzdHlsZWQoRm9vdGVyVmlkZW9QbGF5ZXIpYFxyXG4gIC8qIHotaW5kZXg6MTAwOyAqL1xyXG5gO1xyXG5jb25zdCBUb3V0ID0gc3R5bGVkLmRpdmBcclxuICBjb2xvcjogI2ZmZmZmZjtcclxuICB3aWR0aDogY2FsYyg3MCUgLyAzKTtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgcGFkZGluZy1sZWZ0OiAyMXB4O1xyXG5cclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgLmxpbmsge1xyXG4gICAgei1pbmRleDogNjtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIGJvdHRvbTogLTExMHB4O1xyXG4gICAgbGVmdDogMCU7XHJcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTE1JSk7XHJcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMTUlKTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMDI0cHgpIHtcclxuICAgICAgYSB7XHJcbiAgICAgICAgaGVpZ2h0OiBhdXRvO1xyXG4gICAgICAgIHdpZHRoOiBhdXRvO1xyXG4gICAgICB9XHJcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgdHJhbnNmb3JtOiBub25lO1xyXG4gICAgICAtd2Via2l0LXRyYW5zZm9ybTogbm9uZTtcclxuICAgICAgYm90dG9tOiBhdXRvO1xyXG4gICAgICBoZWlnaHQ6IDUxcHg7XHJcbiAgICAgIHdpZHRoOiBhdXRvO1xyXG4gICAgfVxyXG4gICAgJi5maXJzdCB7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHAge1xyXG4gICAgY29sb3I6ICNmZmZmZmY7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAxNXB4O1xyXG4gICAgbWF4LXdpZHRoOiA5NSU7XHJcbiAgfVxyXG4gIGg0IHtcclxuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XHJcbiAgICBsaW5lLWhlaWdodDogMjBweDtcclxuICAgIG1hcmdpbi1ib3R0b206IDEycHg7XHJcbiAgfVxyXG4gIGEge1xyXG4gICAgbGV0dGVyLXNwYWNpbmc6IDAuODRweDtcclxuICAgIHBhZGRpbmctdG9wOiA1cHg7XHJcbiAgfVxyXG4gICY6YmVmb3JlIHtcclxuICAgIHdpZHRoOiAxcHg7XHJcbiAgICBjb250ZW50OiBcIlwiO1xyXG4gICAgaGVpZ2h0OiAxMTUlO1xyXG4gICAgbGVmdDogMDtcclxuICAgIGJhY2tncm91bmQ6ICNmZmM0MGE7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTAyNHB4KSB7XHJcbiAgICAgIGhlaWdodDogOTAlO1xyXG4gICAgfVxyXG4gIH1cclxuICAmOmZpcnN0LW9mLXR5cGUge1xyXG4gICAgbWFyZ2luLWxlZnQ6IDExNHB4O1xyXG4gICAgLmxpbmsge1xyXG4gICAgICAvKiB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMTUlKTsgKi9cclxuICAgIH1cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMDI0cHgpIHtcclxuICAgICAgLmxpbmsge1xyXG4gICAgICAgIHRyYW5zZm9ybTogbm9uZTtcclxuICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogbm9uZVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gICY6bGFzdC1vZi10eXBlIHtcclxuICAgIG1hcmdpbi1yaWdodDogMTE0cHg7XHJcbiAgICAubGluayB7XHJcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMjElKTtcclxuICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTIxJSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qICY6aG92ZXIge1xyXG4gICAgYSB7XHJcbiAgICAgIGNvbG9yOiAjMWQxZDFkO1xyXG4gICAgfVxyXG4gIH0gKi9cclxuICBAbWVkaWEgKG1heC13aWR0aDogMTAyNHB4KSB7XHJcbiAgICB3aWR0aDogY2FsYyg5MCUgLyAyKTtcclxuICAgIG1hcmdpbi1ib3R0b206IDYwcHg7XHJcbiAgICBtYXJnaW4tbGVmdDogMDtcclxuICAgICY6Zmlyc3Qtb2YtdHlwZSB7XHJcbiAgICAgIG1hcmdpbi1sZWZ0OiAwO1xyXG4gICAgICBtYXJnaW4tbGVmdDogMDtcclxuICAgIH1cclxuICAgICY6bGFzdC1vZi10eXBlIHtcclxuICAgICAgbWFyZ2luLXJpZ2h0OiAwO1xyXG4gICAgICBtYXJnaW4tYm90dG9tOiAwO1xyXG4gICAgICAubGluayB7XHJcbiAgICAgICAgdHJhbnNmb3JtOiBub25lO1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOm5vbmU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDQ4MHB4KSB7XHJcbiAgICB3aWR0aDogODAlO1xyXG4gICAgbWFyZ2luLWJvdHRvbTogNjBweDtcclxuICAgIG1hcmdpbi1sZWZ0OiAzNnB4O1xyXG4gICAgJjpmaXJzdC1vZi10eXBlIHtcclxuICAgICAgbWFyZ2luLWxlZnQ6IDA7XHJcbiAgICAgIG1hcmdpbi1sZWZ0OiAzNnB4O1xyXG4gICAgfVxyXG4gICAgJjpsYXN0LW9mLXR5cGUge1xyXG4gICAgICBtYXJnaW4tcmlnaHQ6IDA7XHJcbiAgICAgIG1hcmdpbi1ib3R0b206IDA7XHJcbiAgICAgIC5saW5rIHtcclxuICAgICAgICB0cmFuc2Zvcm06IG5vbmU7XHJcbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06bm9uZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IEJvdHRvbUZvb3RlciA9IHN0eWxlZC5kaXZgXHJcbiAgZGlzcGxheTogZmxleDtcclxuICBwYWRkaW5nLWxlZnQ6IDExNHB4O1xyXG4gIHBhZGRpbmctcmlnaHQ6IDExNHB4O1xyXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxuICBwYWRkaW5nLXRvcDogMzZweDtcclxuICBwYWRkaW5nLWJvdHRvbTogMzNweDtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBAbWVkaWEgKG1heC13aWR0aDogMTAyNHB4KSB7XHJcbiAgICBwYWRkaW5nOiAwO1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICB9XHJcbmA7XHJcbmNvbnN0IFRvcFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxyXG4gIGJhY2tncm91bmQ6ICMxZDFkMWQ7XHJcbmA7XHJcbmNvbnN0IEJvdHRvbVdyYXBwZXIgPSBzdHlsZWQuZGl2YFxyXG4gIG1heC13aWR0aDogMTQ0MHB4O1xyXG4gIG1hcmdpbjogYXV0bztcclxuYDtcclxuY29uc3QgTGVmdENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgZGlzcGxheTogZmxleDtcclxuICBAbWVkaWEgKG1heC13aWR0aDogMTAyNHB4KSB7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIG1hcmdpbi10b3A6IDQwcHg7XHJcbiAgICBtYXJnaW4tYm90dG9tOiA0MHB4O1xyXG4gIH1cclxuYDtcclxuY29uc3QgQ2VudGVyQ29udGFpbmVyID0gc3R5bGVkKExpbmspYFxyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICBsZWZ0OiA1MCU7XHJcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMjRweCkge1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgYmFja2dyb3VuZDogIzAwMDtcclxuICAgIGxlZnQ6IGF1dG87XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIHBhZGRpbmctdG9wOiA0MHB4O1xyXG4gICAgcGFkZGluZy1ib3R0b206IDQwcHg7XHJcbiAgICBzdmcge1xyXG4gICAgICBwYXRoIHtcclxuICAgICAgICBmaWxsOiAjZmZmO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHN2ZyB7XHJcbiAgICBwYXRoIHtcclxuICAgICAgdHJhbnNpdGlvbjogZmlsbCAyNTBtcyBlYXNlLWluLW91dDtcclxuICAgIH1cclxuICB9XHJcbiAgJjpob3ZlcixcclxuICAmOmZvY3VzIHtcclxuICAgIHN2ZyB7XHJcbiAgICAgIHBhdGgge1xyXG4gICAgICAgIGZpbGw6ICNmZmM0MGE7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbmA7XHJcbmNvbnN0IFJpZ2h0Q29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICBkaXNwbGF5OiBmbGV4O1xyXG5cclxuICBtYXgtd2lkdGg6IDE0NDBweDtcclxuICBtYXJnaW46IGF1dG87XHJcbiAgYm90dG9tOiAwO1xyXG4gIGxlZnQ6IDA7XHJcbiAgd2lkdGg6IDcyJTtcclxuICByaWdodDogMDtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xyXG4gIEBtZWRpYSAobWF4LXdpZHRoOiAxMDI0cHgpIHtcclxuICAgIC8qIGRpc3BsYXk6IG5vbmU7ICovXHJcbiAgfVxyXG5gO1xyXG5jb25zdCBSaWdodFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgcG9zaXRpb246IGZpeGVkO1xyXG4gIGJvdHRvbTogMzZweDtcclxuICB6LWluZGV4OiA5MDtcclxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDI1MG1zIGVhc2UtaW4tb3V0O1xyXG4gIC5saW5rIHtcclxuICAgICYuZmlyc3Qge1xyXG4gICAgICAmOmxhc3Qtb2YtdHlwZSB7XHJcbiAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgICB9XHJcbiAgICAgICY6Zmlyc3Qtb2YtdHlwZSB7XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAxODBweDtcclxuICAgICAgICBhIHtcclxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xyXG4gICAgICAgICAgJjpiZWZvcmUge1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZjNDAwO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8qIGJvcmRlcjoxcHggc29saWQgI2ZmZjsgKi9cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgICYubGFzdCB7XHJcbiAgICAgICY6Zmlyc3Qtb2YtdHlwZSB7XHJcbiAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgICB9XHJcbiAgICAgICY6bGFzdC1vZi10eXBlIHtcclxuICAgICAgICBhIHtcclxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xyXG4gICAgICAgICAgJjpiZWZvcmUge1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZjNDAwO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICBAbWVkaWEgKG1heC13aWR0aDogMTAyNHB4KSB7XHJcbiAgICBib3R0b206IDUycHg7XHJcbiAgICByaWdodDozNXB4O1xyXG4gICAgLmxpbmsge1xyXG4gICAgICBtYXJnaW4tcmlnaHQ6IDA7XHJcbiAgICAgICYuZmlyc3Qge1xyXG4gICAgICAgICY6Zmlyc3Qtb2YtdHlwZSB7XHJcbiAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICY6bGFzdC1vZi10eXBlIHtcclxuICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgICYubGFzdCB7XHJcbiAgICAgICAgJjpmaXJzdC1vZi10eXBlIHtcclxuICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAmLmF0LWJvdHRvbSB7XHJcbiAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICB9XHJcbiAgfVxyXG5gO1xyXG5jb25zdCBDb250YWN0Q29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMjRweCkge1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICB9XHJcbmA7XHJcbmNvbnN0IEFkZHJlc3MgPSBzdHlsZWQuYWBcclxuICBmb250LXdlaWdodDogMzAwO1xyXG4gIGZvbnQtc2l6ZTogMTZweDtcclxuICBsaW5lLWhlaWdodDogMjBweDtcclxuICBsZXR0ZXItc3BhY2luZzogMDtcclxuICBjdXJzb3I6IG5vbmU7XHJcbiAgdHJhbnNpdGlvbjogY29sb3IgMjUwbXMgZWFzZS1pbi1vdXQ7XHJcbiAgJjpob3ZlcixcclxuICAmOmZvY3VzIHtcclxuICAgIGNvbG9yOiAjZmZjNDAwO1xyXG4gIH1cclxuICBAbWVkaWEgKG1heC13aWR0aDogMTAyNHB4KSB7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xyXG4gIH1cclxuYDtcclxuY29uc3QgUGhvbmUgPSBzdHlsZWQoTGluaylgXHJcbiAgZm9udC13ZWlnaHQ6IDUwMDtcclxuICBsaW5lLWhlaWdodDogMjBweDtcclxuICBsZXR0ZXItc3BhY2luZzogMDtcclxuICBmb250LXNpemU6IDE2cHg7XHJcbiAgdHJhbnNpdGlvbjogY29sb3IgMjUwbXMgZWFzZS1pbi1vdXQ7XHJcbiAgY3Vyc29yOiBub25lO1xyXG4gICY6aG92ZXIsXHJcbiAgJjpmb2N1cyB7XHJcbiAgICBjb2xvcjogI2ZmYzQwMDtcclxuICB9XHJcbmA7XHJcbmNvbnN0IFJlZWxMaW5rID0gc3R5bGVkKExpbmspYFxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICB0b3A6IDA7XHJcbiAgbGVmdDogMDtcclxuICB3aWR0aDogMTAwJTtcclxuICBoZWlnaHQ6IDEwMCU7XHJcbiAgYm90dG9tOiAwO1xyXG4gIHJpZ2h0OiAwO1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBmb250LXNpemU6IDE0cHg7XHJcbiAgZm9udC13ZWlnaHQ6IDUwMDtcclxuICBsaW5lLWhlaWdodDogMTJweDtcclxuICBsZXR0ZXItc3BhY2luZzogMC44NHB4O1xyXG4gIG1hcmdpbjogYXV0bztcclxuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xyXG5gO1xyXG5jb25zdCBDaXJjbGVXcmFwcGVyID0gc3R5bGVkKExpbmspYFxyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBtYXJnaW4tcmlnaHQ6IDMwcHg7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y4ZjhmODtcclxuICBib3JkZXItcmFkaXVzOiAxMDAlO1xyXG4gIHdpZHRoOiAxMzBweDtcclxuICBoZWlnaHQ6IDEzMHB4O1xyXG4gICY6bGFzdC1vZi10eXBlIHtcclxuICAgIG1hcmdpbi1yaWdodDogMDtcclxuICB9XHJcbmA7XHJcbmNvbnN0IFNhbXBsZUxpbmsgPSBzdHlsZWQoTGluaylgXHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gIHRvcDogMDtcclxuICBsZWZ0OiAwO1xyXG4gIHdpZHRoOiAxMDAlO1xyXG4gIGhlaWdodDogMTAwJTtcclxuICBib3R0b206IDA7XHJcbiAgcmlnaHQ6IDA7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIGZvbnQtc2l6ZTogMTRweDtcclxuICBmb250LXdlaWdodDogNTAwO1xyXG4gIGxpbmUtaGVpZ2h0OiAxNHB4O1xyXG4gIGxldHRlci1zcGFjaW5nOiAwLjg0cHg7XHJcbiAgd2lkdGg6IDcwJTtcclxuICBtYXJnaW46IGF1dG87XHJcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcclxuYDtcclxuY29uc3QgU29jaWFsQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgbWFyZ2luLXJpZ2h0OiA0OHB4O1xyXG4gIEBtZWRpYSAobWF4LXdpZHRoOiAxMDI0cHgpIHtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDA7XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgU3R5bGVkU29jaWFsTGluayA9IHN0eWxlZChMaW5rKWBcclxuICBmb250LXdlaWdodDogNTAwO1xyXG4gIGZvbnQtc2l6ZTogMTZweDtcclxuICBsZXR0ZXItc3BhY2luZzogMDtcclxuICBsaW5lLWhlaWdodDogMjBweDtcclxuICB0cmFuc2l0aW9uOiBjb2xvciAyNTBtcyBlYXNlLWluLW91dDtcclxuICAmOmhvdmVyLFxyXG4gICY6Zm9jdXMge1xyXG4gICAgY29sb3I6ICNmZmM0MDA7XHJcbiAgfVxyXG4gIEBtZWRpYSAobWF4LXdpZHRoOiAxMDI0cHgpIHtcclxuICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XHJcbiAgfVxyXG5gO1xyXG4iXX0= */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Title=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"h2\",{target:\"e8kjvma1\",label:\"Title\"})( false?undefined:{name:\"1ou2v44\",styles:\"margin:0;margin-bottom:16px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var StyledCard=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_partials_centeredCard__WEBPACK_IMPORTED_MODULE_6__[\"default\"],{target:\"e8kjvma2\",label:\"StyledCard\"})( false?undefined:{name:\"lvyu5j\",styles:\"margin-right:10px;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var StyledLink=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_link__WEBPACK_IMPORTED_MODULE_3__[\"default\"],{target:\"e8kjvma3\",label:\"StyledLink\"})( false?undefined:{name:\"17d94v1\",styles:\"text-decoration:none;text-transform:uppercase;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var FooterContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e8kjvma4\",label:\"FooterContainer\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var NotFixedContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e8kjvma5\",label:\"NotFixedContainer\"})( false?undefined:{name:\"1ocut5d\",styles:\"display:flex;.link{&.first{&:first-of-type{opacity:0;pointer-events:none;}}&.last{&:last-of-type{opacity:0;pointer-events:none;}}}@media (max-width:1024px){display:none;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var TopFooter=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e8kjvma6\",label:\"TopFooter\"})( false?undefined:{name:\"1d3arwg\",styles:\"display:flex;max-width:1440px;width:100%;margin:auto;padding-top:125px;padding-bottom:125px;justify-content:space-between;@media (max-width:1024px){flex-wrap:wrap;padding-left:60px;padding-right:60px;width:auto;}@media (max-width:480px){flex-direction:column;padding:0;padding-top:60px;padding-bottom:60px;width:100%;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var StyledVideoPlayer=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_partials_FooterVideoPlayer__WEBPACK_IMPORTED_MODULE_5__[\"default\"],{target:\"e8kjvma7\",label:\"StyledVideoPlayer\"})( false?undefined:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\");var Tout=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e8kjvma8\",label:\"Tout\"})( false?undefined:{name:\"a2tujh\",styles:\"color:#ffffff;width:calc(70% / 3);position:relative;padding-left:21px;position:relative;.link{z-index:6;position:absolute;bottom:-110px;left:0%;transform:translateX(-15%);-webkit-transform:translateX(-15%);border-radius:50%;@media (max-width:1024px){a{height:auto;width:auto;}position:relative;transform:none;-webkit-transform:none;bottom:auto;height:51px;width:auto;}&.first{}}p{color:#ffffff;margin-bottom:15px;max-width:95%;}h4{text-transform:uppercase;line-height:20px;margin-bottom:12px;}a{letter-spacing:0.84px;padding-top:5px;}&:before{width:1px;content:\\\"\\\";height:115%;left:0;background:#ffc40a;position:absolute;@media (max-width:1024px){height:90%;}}&:first-of-type{margin-left:114px;.link{}@media (max-width:1024px){.link{transform:none;-webkit-transform:none}}}&:last-of-type{margin-right:114px;.link{transform:translateX(-21%);-webkit-transform:translateX(-21%);}}@media (max-width:1024px){width:calc(90% / 2);margin-bottom:60px;margin-left:0;&:first-of-type{margin-left:0;margin-left:0;}&:last-of-type{margin-right:0;margin-bottom:0;.link{transform:none;-webkit-transform:none;}}}@media (max-width:480px){width:80%;margin-bottom:60px;margin-left:36px;&:first-of-type{margin-left:0;margin-left:36px;}&:last-of-type{margin-right:0;margin-bottom:0;.link{transform:none;-webkit-transform:none;}}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkU6XFxEZXZcXEZPUlRcXEZvcnRTdHVkaW8yMDE5XFxwYWNrYWdlc1xcbWFycy10aGVtZVxcc3JjXFxjb21wb25lbnRzXFxmb290ZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBcVF1QiIsImZpbGUiOiJFOlxcRGV2XFxGT1JUXFxGb3J0U3R1ZGlvMjAxOVxccGFja2FnZXNcXG1hcnMtdGhlbWVcXHNyY1xcY29tcG9uZW50c1xcZm9vdGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgeyBjb25uZWN0LCBzdHlsZWQgfSBmcm9tIFwiZnJvbnRpdHlcIjtcclxuaW1wb3J0IExpbmsgZnJvbSBcIi4vbGlua1wiO1xyXG5pbXBvcnQgQ2FyZCBmcm9tIFwiLi9wYXJ0aWFscy9jYXJkXCI7XHJcbmltcG9ydCBGb290ZXJWaWRlb1BsYXllciBmcm9tIFwiLi9wYXJ0aWFscy9Gb290ZXJWaWRlb1BsYXllclwiO1xyXG5pbXBvcnQgQ2VudGVyZWRDYXJkIGZyb20gXCIuL3BhcnRpYWxzL2NlbnRlcmVkQ2FyZFwiO1xyXG5jbGFzcyBGb290ZXIgZXh0ZW5kcyBDb21wb25lbnQge1xyXG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XHJcbiAgICBzdXBlcihwcm9wcyk7XHJcbiAgfVxyXG5cclxuICBpc09uU2NyZWVuKCkge1xyXG4gICAgLyogZ2V0IHRoZSBlbGVtZW50cyAqL1xyXG4gICAgdmFyIGVsZW1lbnRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcInNweVwiKTtcclxuICAgIC8qIGl0ZXJhdGUgKi9cclxuICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoZWxlbWVudHMsIGZ1bmN0aW9uKGVsZW1lbnQsIGluZGV4KSB7XHJcbiAgICAgIHZhciBib3VuZHMgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cclxuICAgICAgaWYgKGJvdW5kcy50b3AgPCB3aW5kb3cuaW5uZXJIZWlnaHQgJiYgYm91bmRzLmJvdHRvbSA+IDApIHtcclxuICAgICAgICBlbGVtZW50LmNsYXNzTGlzdC5hZGQoXCJpbnZpZXdcIik7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgLy8gZWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKFwiaW52aWV3XCIpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICB3aW5kb3cuc2V0VGltZW91dCh0aGlzLmlzT25TY3JlZW4uYmluZCh0aGlzKSwgMjUwKTtcclxuICB9XHJcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XHJcbiAgICB3aW5kb3cuc2V0VGltZW91dCh0aGlzLmlzT25TY3JlZW4uYmluZCh0aGlzKSwgMjUwKTsgIFxyXG4gICAgd2luZG93Lm9uc2Nyb2xsID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciBzdGlja3lmb290ZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3N0dWNrXCIpO1xyXG4gICAgICB2YXIgcGFnZUhlaWdodCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5vZmZzZXRIZWlnaHQsXHJcbiAgICAgICAgd2luZG93SGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0LFxyXG4gICAgICAgIHNjcm9sbFBvc2l0aW9uID1cclxuICAgICAgICAgIHdpbmRvdy5zY3JvbGxZIHx8XHJcbiAgICAgICAgICB3aW5kb3cucGFnZVlPZmZzZXQgfHxcclxuICAgICAgICAgIGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wICtcclxuICAgICAgICAgICAgKChkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcCkgfHxcclxuICAgICAgICAgICAgICAwKTtcclxuXHJcblxyXG4gICAgICBpZiAocGFnZUhlaWdodCA8PSB3aW5kb3dIZWlnaHQgKyBzY3JvbGxQb3NpdGlvbikge1xyXG4gICAgICAgICBzdGlja3lmb290ZXIuY2xhc3NMaXN0LmFkZChcImF0LWJvdHRvbVwiKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBzdGlja3lmb290ZXIuY2xhc3NMaXN0LnJlbW92ZShcImF0LWJvdHRvbVwiKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcbiAgcmVuZGVyKCkge1xyXG4gICAgY29uc3Qgb3B0aW9ucyA9IHRoaXMucHJvcHMuc3RhdGUuc291cmNlLmdldChcImFjZi1vcHRpb25zLXBhZ2VcIik7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICA8Rm9vdGVyQ29udGFpbmVyPlxyXG4gICAgICAgIDxUb3BXcmFwcGVyPlxyXG4gICAgICAgICAgPFRvcEZvb3Rlcj5cclxuICAgICAgICAgICAgPFRvdXQgY2xhc3NOYW1lPVwic3B5XCI+XHJcbiAgICAgICAgICAgICAgPGg0PntvcHRpb25zLmFjZi5mb290ZXJfc2VjdGlvbi5oaXJlX2hlYWRsaW5lfTwvaDQ+XHJcbiAgICAgICAgICAgICAgPHBcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInAxXCJcclxuICAgICAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7XHJcbiAgICAgICAgICAgICAgICAgIF9faHRtbDogb3B0aW9ucy5hY2YuZm9vdGVyX3NlY3Rpb24uaGlyZV9ib2R5XHJcbiAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgID48L3A+XHJcbiAgICAgICAgICAgICAgPENhcmRcclxuICAgICAgICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXHJcbiAgICAgICAgICAgICAgICBsaW5rVVJMPVwibWFpbHRvOnByb2plY3RzQGZvcnR5ZWFoLmNvbVwiXHJcbiAgICAgICAgICAgICAgICBsaW5rVGV4dD17b3B0aW9ucy5hY2YuZm9vdGVyX3NlY3Rpb24uaGlyZV9jdGFfdGV4dH1cclxuICAgICAgICAgICAgICA+PC9DYXJkPlxyXG4gICAgICAgICAgICA8L1RvdXQ+XHJcbiAgICAgICAgICAgIDxUb3V0IGNsYXNzTmFtZT1cInNweVwiPlxyXG4gICAgICAgICAgICAgIDxoND57b3B0aW9ucy5hY2YuZm9vdGVyX3NlY3Rpb24ucmVxdWVzdF93b3JrX2hlYWRsaW5lfTwvaDQ+XHJcbiAgICAgICAgICAgICAgPHBcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInAxXCJcclxuICAgICAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7XHJcbiAgICAgICAgICAgICAgICAgIF9faHRtbDogb3B0aW9ucy5hY2YuZm9vdGVyX3NlY3Rpb24ucmVxdWVzdF93b3JrX2JvZHlcclxuICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgPjwvcD5cclxuICAgICAgICAgICAgICA8Q2FyZFxyXG4gICAgICAgICAgICAgICAgbGlua1VSTD1cIi9jb250YWN0XCJcclxuICAgICAgICAgICAgICAgIGxpbmtUZXh0PXtvcHRpb25zLmFjZi5mb290ZXJfc2VjdGlvbi5yZXF1ZXN0X3dvcmtfY3RhX3RleHR9XHJcbiAgICAgICAgICAgICAgPjwvQ2FyZD5cclxuICAgICAgICAgICAgPC9Ub3V0PlxyXG4gICAgICAgICAgICA8VG91dCBjbGFzc05hbWU9XCJzcHlcIj5cclxuICAgICAgICAgICAgICA8aDQ+e29wdGlvbnMuYWNmLmZvb3Rlcl9zZWN0aW9uLmNhcmVlcnNfaGVhZGxpbmV9PC9oND5cclxuICAgICAgICAgICAgICA8cFxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwicDFcIlxyXG4gICAgICAgICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tcclxuICAgICAgICAgICAgICAgICAgX19odG1sOiBvcHRpb25zLmFjZi5mb290ZXJfc2VjdGlvbi5jYXJlZXJzX2JvZHlcclxuICAgICAgICAgICAgICAgIH19XHJcbiAgICAgICAgICAgICAgPjwvcD5cclxuICAgICAgICAgICAgICA8Q2FyZFxyXG4gICAgICAgICAgICAgICAgbGlua1VSTD1cIm1haWx0bzpjYXJlZXJzQGZvcnR5ZWFoLmNvbVwiXHJcbiAgICAgICAgICAgICAgICBsaW5rVGV4dD17b3B0aW9ucy5hY2YuZm9vdGVyX3NlY3Rpb24uY2FyZWVyc19jdGFfdGV4dH1cclxuICAgICAgICAgICAgICA+PC9DYXJkPlxyXG4gICAgICAgICAgICA8L1RvdXQ+XHJcbiAgICAgICAgICA8L1RvcEZvb3Rlcj5cclxuICAgICAgICA8L1RvcFdyYXBwZXI+XHJcbiAgICAgICAgPEJvdHRvbVdyYXBwZXI+XHJcbiAgICAgICAgICA8Qm90dG9tRm9vdGVyPlxyXG4gICAgICAgICAgICA8Q2VudGVyQ29udGFpbmVyIGxpbms9XCIvXCI+XHJcbiAgICAgICAgICAgICAgPHN2Z1xyXG4gICAgICAgICAgICAgICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXHJcbiAgICAgICAgICAgICAgICB3aWR0aD1cIjI0LjQ2M1wiXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ9XCI1Mi4yMjdcIlxyXG4gICAgICAgICAgICAgICAgdmlld0JveD1cIjAgMCAyNC40NjMgNTIuMjI3XCJcclxuICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8cGF0aFxyXG4gICAgICAgICAgICAgICAgICBpZD1cImxvZ28tZl9zaG9ydFwiXHJcbiAgICAgICAgICAgICAgICAgIGQ9XCJNMjMuMTY5LDQzLjAxMUgwdjkuMjE2SDIzLjE2OVptLTEyLjgtMzMuOEgyNC40NjNWMEgwVjMzLjhIMTAuMzY5VjIzLjgxMmgxMi44VjE0LjU5M2gtMTIuOFpcIlxyXG4gICAgICAgICAgICAgICAgICBmaWxsPVwiIzFkMWQxZFwiXHJcbiAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgIDwvc3ZnPlxyXG4gICAgICAgICAgICA8L0NlbnRlckNvbnRhaW5lcj5cclxuICAgICAgICAgICAgPExlZnRDb250YWluZXI+XHJcbiAgICAgICAgICAgICAgPFNvY2lhbENvbnRhaW5lcj5cclxuICAgICAgICAgICAgICAgIDxTdHlsZWRTb2NpYWxMaW5rXHJcbiAgICAgICAgICAgICAgICAgIHRhcmdldD17b3B0aW9ucy5hY2Yuc29jaWFsX3NlY3Rpb24uaW5zdGFncmFtLnRhcmdldH1cclxuICAgICAgICAgICAgICAgICAgbGluaz17b3B0aW9ucy5hY2Yuc29jaWFsX3NlY3Rpb24uaW5zdGFncmFtLnVybH1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAge29wdGlvbnMuYWNmLnNvY2lhbF9zZWN0aW9uLmluc3RhZ3JhbS50aXRsZX1cclxuICAgICAgICAgICAgICAgIDwvU3R5bGVkU29jaWFsTGluaz5cclxuICAgICAgICAgICAgICAgIDxTdHlsZWRTb2NpYWxMaW5rXHJcbiAgICAgICAgICAgICAgICAgIHRhcmdldD17b3B0aW9ucy5hY2Yuc29jaWFsX3NlY3Rpb24uZHJpYmJsZS50YXJnZXR9XHJcbiAgICAgICAgICAgICAgICAgIGxpbms9e29wdGlvbnMuYWNmLnNvY2lhbF9zZWN0aW9uLmRyaWJibGUudXJsfVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICB7b3B0aW9ucy5hY2Yuc29jaWFsX3NlY3Rpb24uZHJpYmJsZS50aXRsZX1cclxuICAgICAgICAgICAgICAgIDwvU3R5bGVkU29jaWFsTGluaz5cclxuICAgICAgICAgICAgICAgIDxTdHlsZWRTb2NpYWxMaW5rXHJcbiAgICAgICAgICAgICAgICAgIHRhcmdldD17b3B0aW9ucy5hY2Yuc29jaWFsX3NlY3Rpb24ubGlua2VkaW4udGFyZ2V0fVxyXG4gICAgICAgICAgICAgICAgICBsaW5rPXtvcHRpb25zLmFjZi5zb2NpYWxfc2VjdGlvbi5saW5rZWRpbi51cmx9XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgIHtvcHRpb25zLmFjZi5zb2NpYWxfc2VjdGlvbi5saW5rZWRpbi50aXRsZX1cclxuICAgICAgICAgICAgICAgIDwvU3R5bGVkU29jaWFsTGluaz5cclxuICAgICAgICAgICAgICA8L1NvY2lhbENvbnRhaW5lcj5cclxuICAgICAgICAgICAgICA8Q29udGFjdENvbnRhaW5lcj5cclxuICAgICAgICAgICAgICAgIDxBZGRyZXNzXHJcbiAgICAgICAgICAgICAgICAgIGhyZWY9eydodHRwczovL3d3dy5nb29nbGUuY29tL21hcHMvcGxhY2UvJyArIG9wdGlvbnMuYWNmLnNvY2lhbF9zZWN0aW9uLmFkZHJlc3NyZXBsYWNlKC88W14+XSo+Py9nbSwgJycpfVxyXG4gICAgICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxyXG4gICAgICAgICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17e1xyXG4gICAgICAgICAgICAgICAgICAgIF9faHRtbDogb3B0aW9ucy5hY2Yuc29jaWFsX3NlY3Rpb24uYWRkcmVzc1xyXG4gICAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgICAgPjwvQWRkcmVzcz5cclxuICAgICAgICAgICAgICAgIDxQaG9uZVxyXG4gICAgICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxyXG4gICAgICAgICAgICAgICAgICBsaW5rPXtcInRlbDpcIiArIG9wdGlvbnMuYWNmLnNvY2lhbF9zZWN0aW9uLnBob25lX251bWJlcl9maWVsZH1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAge29wdGlvbnMuYWNmLnNvY2lhbF9zZWN0aW9uLnBob25lX251bWJlcl9maWVsZH1cclxuICAgICAgICAgICAgICAgIDwvUGhvbmU+XHJcbiAgICAgICAgICAgICAgPC9Db250YWN0Q29udGFpbmVyPlxyXG4gICAgICAgICAgICA8L0xlZnRDb250YWluZXI+XHJcbiAgICAgICAgICAgIDxSaWdodENvbnRhaW5lcj5cclxuICAgICAgICAgICAgICA8UmlnaHRXcmFwcGVyIGlkPVwic3R1Y2tcIiBjbGFzc05hbWU9e3RoaXMucHJvcHMuYWN0aXZlVG91dH0+XHJcbiAgICAgICAgICAgICAgICA8U3R5bGVkQ2FyZFxyXG4gICAgICAgICAgICAgICAgICBsaW5rVVJMPVwiL3JlZWxcIlxyXG4gICAgICAgICAgICAgICAgICBhY3RpdmVUb3V0PXt0aGlzLnByb3BzLmFjdGl2ZVRvdXR9XHJcbiAgICAgICAgICAgICAgICAgIGxpbmtUZXh0PXtvcHRpb25zLmFjZi5mb290ZXJfY3RhX3RleHQucmVlbF90ZXh0fVxyXG4gICAgICAgICAgICAgICAgPjwvU3R5bGVkQ2FyZD5cclxuICAgICAgICAgICAgICAgIHsvKiA8U3R5bGVkVmlkZW9QbGF5ZXJcclxuICAgICAgICAgICAgICAgICAgdG9nZ2xlPXt0aGlzLnByb3BzLnN0YXRlfVxyXG4gICAgICAgICAgICAgICAgICBzcmM9e29wdGlvbnMuYWNmLnZpZGVvW1widXJsXCJdfVxyXG4gICAgICAgICAgICAgICAgLz4gKi99XHJcbiAgICAgICAgICAgICAgICA8U3R5bGVkQ2FyZFxyXG4gICAgICAgICAgICAgICAgICBsaW5rVVJMPVwiL2NvbnRhY3RcIlxyXG4gICAgICAgICAgICAgICAgICBhY3RpdmVUb3V0PXt0aGlzLnByb3BzLmFjdGl2ZVRvdXR9XHJcbiAgICAgICAgICAgICAgICAgIGxpbmtUZXh0PXtvcHRpb25zLmFjZi5mb290ZXJfY3RhX3RleHQud29ya19zYW1wbGVfZm9ybV90ZXh0fVxyXG4gICAgICAgICAgICAgICAgPjwvU3R5bGVkQ2FyZD5cclxuICAgICAgICAgICAgICA8L1JpZ2h0V3JhcHBlcj5cclxuICAgICAgICAgICAgICA8Tm90Rml4ZWRDb250YWluZXIgY2xhc3NOYW1lPXt0aGlzLnByb3BzLmFjdGl2ZVRvdXR9PlxyXG4gICAgICAgICAgICAgICAgPFN0eWxlZENhcmRcclxuICAgICAgICAgICAgICAgICAgbGlua1VSTD1cIi9yZWVsXCJcclxuICAgICAgICAgICAgICAgICAgYWN0aXZlVG91dD17dGhpcy5wcm9wcy5hY3RpdmVUb3V0fVxyXG4gICAgICAgICAgICAgICAgICBsaW5rVGV4dD17b3B0aW9ucy5hY2YuZm9vdGVyX2N0YV90ZXh0LnJlZWxfdGV4dH1cclxuICAgICAgICAgICAgICAgID48L1N0eWxlZENhcmQ+XHJcblxyXG4gICAgICAgICAgICAgICAgPFN0eWxlZENhcmRcclxuICAgICAgICAgICAgICAgICAgbGlua1VSTD1cIi9jb250YWN0XCJcclxuICAgICAgICAgICAgICAgICAgYWN0aXZlVG91dD17dGhpcy5wcm9wcy5hY3RpdmVUb3V0fVxyXG4gICAgICAgICAgICAgICAgICBsaW5rVGV4dD17b3B0aW9ucy5hY2YuZm9vdGVyX2N0YV90ZXh0Lndvcmtfc2FtcGxlX2Zvcm1fdGV4dH1cclxuICAgICAgICAgICAgICAgID48L1N0eWxlZENhcmQ+XHJcbiAgICAgICAgICAgICAgPC9Ob3RGaXhlZENvbnRhaW5lcj5cclxuICAgICAgICAgICAgPC9SaWdodENvbnRhaW5lcj5cclxuICAgICAgICAgIDwvQm90dG9tRm9vdGVyPlxyXG4gICAgICAgIDwvQm90dG9tV3JhcHBlcj5cclxuICAgICAgPC9Gb290ZXJDb250YWluZXI+XHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29ubmVjdChGb290ZXIpO1xyXG5cclxuY29uc3QgQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICB3aWR0aDogMTQ0MHB4O1xyXG4gIG1heC13aWR0aDogMTAwJTtcclxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xyXG4gIHBhZGRpbmc6IDI0cHggMDtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xyXG4gIG1hcmdpbjogYXV0bztcclxuICBAbWVkaWEgKG1heC13aWR0aDogMTAyNHB4KSB7XHJcbiAgICB3aWR0aDogYXV0bztcclxuICB9XHJcbmA7XHJcblxyXG5jb25zdCBUaXRsZSA9IHN0eWxlZC5oMmBcclxuICBtYXJnaW46IDA7XHJcbiAgbWFyZ2luLWJvdHRvbTogMTZweDtcclxuYDtcclxuY29uc3QgU3R5bGVkQ2FyZCA9IHN0eWxlZChDZW50ZXJlZENhcmQpYFxyXG4gIG1hcmdpbi1yaWdodDogMTBweDtcclxuYDtcclxuXHJcbmNvbnN0IFN0eWxlZExpbmsgPSBzdHlsZWQoTGluaylgXHJcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xyXG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XHJcbmA7XHJcbmNvbnN0IEZvb3RlckNvbnRhaW5lciA9IHN0eWxlZC5kaXZgYDtcclxuY29uc3QgTm90Rml4ZWRDb250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgLmxpbmsge1xyXG4gICAgJi5maXJzdCB7XHJcbiAgICAgICY6Zmlyc3Qtb2YtdHlwZSB7XHJcbiAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgJi5sYXN0IHtcclxuICAgICAgJjpsYXN0LW9mLXR5cGUge1xyXG4gICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMjRweCkge1xyXG4gICAgZGlzcGxheTogbm9uZTtcclxuICB9XHJcbmA7XHJcbmNvbnN0IFRvcEZvb3RlciA9IHN0eWxlZC5kaXZgXHJcbiAgZGlzcGxheTogZmxleDtcclxuICBtYXgtd2lkdGg6IDE0NDBweDtcclxuICB3aWR0aDogMTAwJTtcclxuICBtYXJnaW46IGF1dG87XHJcbiAgcGFkZGluZy10b3A6IDEyNXB4O1xyXG4gIHBhZGRpbmctYm90dG9tOiAxMjVweDtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMjRweCkge1xyXG4gICAgZmxleC13cmFwOiB3cmFwO1xyXG4gICAgcGFkZGluZy1sZWZ0OiA2MHB4O1xyXG4gICAgcGFkZGluZy1yaWdodDogNjBweDtcclxuICAgIHdpZHRoOiBhdXRvO1xyXG4gIH1cclxuICBAbWVkaWEgKG1heC13aWR0aDogNDgwcHgpIHtcclxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgICBwYWRkaW5nOiAwO1xyXG4gICAgcGFkZGluZy10b3A6IDYwcHg7XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogNjBweDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gIH1cclxuYDtcclxuY29uc3QgU3R5bGVkVmlkZW9QbGF5ZXIgPSBzdHlsZWQoRm9vdGVyVmlkZW9QbGF5ZXIpYFxyXG4gIC8qIHotaW5kZXg6MTAwOyAqL1xyXG5gO1xyXG5jb25zdCBUb3V0ID0gc3R5bGVkLmRpdmBcclxuICBjb2xvcjogI2ZmZmZmZjtcclxuICB3aWR0aDogY2FsYyg3MCUgLyAzKTtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgcGFkZGluZy1sZWZ0OiAyMXB4O1xyXG5cclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgLmxpbmsge1xyXG4gICAgei1pbmRleDogNjtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIGJvdHRvbTogLTExMHB4O1xyXG4gICAgbGVmdDogMCU7XHJcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTE1JSk7XHJcbiAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMTUlKTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDUwJTtcclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMDI0cHgpIHtcclxuICAgICAgYSB7XHJcbiAgICAgICAgaGVpZ2h0OiBhdXRvO1xyXG4gICAgICAgIHdpZHRoOiBhdXRvO1xyXG4gICAgICB9XHJcbiAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgdHJhbnNmb3JtOiBub25lO1xyXG4gICAgICAtd2Via2l0LXRyYW5zZm9ybTogbm9uZTtcclxuICAgICAgYm90dG9tOiBhdXRvO1xyXG4gICAgICBoZWlnaHQ6IDUxcHg7XHJcbiAgICAgIHdpZHRoOiBhdXRvO1xyXG4gICAgfVxyXG4gICAgJi5maXJzdCB7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHAge1xyXG4gICAgY29sb3I6ICNmZmZmZmY7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAxNXB4O1xyXG4gICAgbWF4LXdpZHRoOiA5NSU7XHJcbiAgfVxyXG4gIGg0IHtcclxuICAgIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XHJcbiAgICBsaW5lLWhlaWdodDogMjBweDtcclxuICAgIG1hcmdpbi1ib3R0b206IDEycHg7XHJcbiAgfVxyXG4gIGEge1xyXG4gICAgbGV0dGVyLXNwYWNpbmc6IDAuODRweDtcclxuICAgIHBhZGRpbmctdG9wOiA1cHg7XHJcbiAgfVxyXG4gICY6YmVmb3JlIHtcclxuICAgIHdpZHRoOiAxcHg7XHJcbiAgICBjb250ZW50OiBcIlwiO1xyXG4gICAgaGVpZ2h0OiAxMTUlO1xyXG4gICAgbGVmdDogMDtcclxuICAgIGJhY2tncm91bmQ6ICNmZmM0MGE7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTAyNHB4KSB7XHJcbiAgICAgIGhlaWdodDogOTAlO1xyXG4gICAgfVxyXG4gIH1cclxuICAmOmZpcnN0LW9mLXR5cGUge1xyXG4gICAgbWFyZ2luLWxlZnQ6IDExNHB4O1xyXG4gICAgLmxpbmsge1xyXG4gICAgICAvKiB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMTUlKTsgKi9cclxuICAgIH1cclxuICAgIEBtZWRpYSAobWF4LXdpZHRoOiAxMDI0cHgpIHtcclxuICAgICAgLmxpbmsge1xyXG4gICAgICAgIHRyYW5zZm9ybTogbm9uZTtcclxuICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogbm9uZVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gICY6bGFzdC1vZi10eXBlIHtcclxuICAgIG1hcmdpbi1yaWdodDogMTE0cHg7XHJcbiAgICAubGluayB7XHJcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMjElKTtcclxuICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTIxJSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qICY6aG92ZXIge1xyXG4gICAgYSB7XHJcbiAgICAgIGNvbG9yOiAjMWQxZDFkO1xyXG4gICAgfVxyXG4gIH0gKi9cclxuICBAbWVkaWEgKG1heC13aWR0aDogMTAyNHB4KSB7XHJcbiAgICB3aWR0aDogY2FsYyg5MCUgLyAyKTtcclxuICAgIG1hcmdpbi1ib3R0b206IDYwcHg7XHJcbiAgICBtYXJnaW4tbGVmdDogMDtcclxuICAgICY6Zmlyc3Qtb2YtdHlwZSB7XHJcbiAgICAgIG1hcmdpbi1sZWZ0OiAwO1xyXG4gICAgICBtYXJnaW4tbGVmdDogMDtcclxuICAgIH1cclxuICAgICY6bGFzdC1vZi10eXBlIHtcclxuICAgICAgbWFyZ2luLXJpZ2h0OiAwO1xyXG4gICAgICBtYXJnaW4tYm90dG9tOiAwO1xyXG4gICAgICAubGluayB7XHJcbiAgICAgICAgdHJhbnNmb3JtOiBub25lO1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOm5vbmU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDQ4MHB4KSB7XHJcbiAgICB3aWR0aDogODAlO1xyXG4gICAgbWFyZ2luLWJvdHRvbTogNjBweDtcclxuICAgIG1hcmdpbi1sZWZ0OiAzNnB4O1xyXG4gICAgJjpmaXJzdC1vZi10eXBlIHtcclxuICAgICAgbWFyZ2luLWxlZnQ6IDA7XHJcbiAgICAgIG1hcmdpbi1sZWZ0OiAzNnB4O1xyXG4gICAgfVxyXG4gICAgJjpsYXN0LW9mLXR5cGUge1xyXG4gICAgICBtYXJnaW4tcmlnaHQ6IDA7XHJcbiAgICAgIG1hcmdpbi1ib3R0b206IDA7XHJcbiAgICAgIC5saW5rIHtcclxuICAgICAgICB0cmFuc2Zvcm06IG5vbmU7XHJcbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06bm9uZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IEJvdHRvbUZvb3RlciA9IHN0eWxlZC5kaXZgXHJcbiAgZGlzcGxheTogZmxleDtcclxuICBwYWRkaW5nLWxlZnQ6IDExNHB4O1xyXG4gIHBhZGRpbmctcmlnaHQ6IDExNHB4O1xyXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcclxuICBwYWRkaW5nLXRvcDogMzZweDtcclxuICBwYWRkaW5nLWJvdHRvbTogMzNweDtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBAbWVkaWEgKG1heC13aWR0aDogMTAyNHB4KSB7XHJcbiAgICBwYWRkaW5nOiAwO1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICB9XHJcbmA7XHJcbmNvbnN0IFRvcFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxyXG4gIGJhY2tncm91bmQ6ICMxZDFkMWQ7XHJcbmA7XHJcbmNvbnN0IEJvdHRvbVdyYXBwZXIgPSBzdHlsZWQuZGl2YFxyXG4gIG1heC13aWR0aDogMTQ0MHB4O1xyXG4gIG1hcmdpbjogYXV0bztcclxuYDtcclxuY29uc3QgTGVmdENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgZGlzcGxheTogZmxleDtcclxuICBAbWVkaWEgKG1heC13aWR0aDogMTAyNHB4KSB7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICAgIG1hcmdpbi10b3A6IDQwcHg7XHJcbiAgICBtYXJnaW4tYm90dG9tOiA0MHB4O1xyXG4gIH1cclxuYDtcclxuY29uc3QgQ2VudGVyQ29udGFpbmVyID0gc3R5bGVkKExpbmspYFxyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICBsZWZ0OiA1MCU7XHJcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMjRweCkge1xyXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgYmFja2dyb3VuZDogIzAwMDtcclxuICAgIGxlZnQ6IGF1dG87XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGRpc3BsYXk6IGZsZXg7XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIHBhZGRpbmctdG9wOiA0MHB4O1xyXG4gICAgcGFkZGluZy1ib3R0b206IDQwcHg7XHJcbiAgICBzdmcge1xyXG4gICAgICBwYXRoIHtcclxuICAgICAgICBmaWxsOiAjZmZmO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHN2ZyB7XHJcbiAgICBwYXRoIHtcclxuICAgICAgdHJhbnNpdGlvbjogZmlsbCAyNTBtcyBlYXNlLWluLW91dDtcclxuICAgIH1cclxuICB9XHJcbiAgJjpob3ZlcixcclxuICAmOmZvY3VzIHtcclxuICAgIHN2ZyB7XHJcbiAgICAgIHBhdGgge1xyXG4gICAgICAgIGZpbGw6ICNmZmM0MGE7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbmA7XHJcbmNvbnN0IFJpZ2h0Q29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICBkaXNwbGF5OiBmbGV4O1xyXG5cclxuICBtYXgtd2lkdGg6IDE0NDBweDtcclxuICBtYXJnaW46IGF1dG87XHJcbiAgYm90dG9tOiAwO1xyXG4gIGxlZnQ6IDA7XHJcbiAgd2lkdGg6IDcyJTtcclxuICByaWdodDogMDtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xyXG4gIEBtZWRpYSAobWF4LXdpZHRoOiAxMDI0cHgpIHtcclxuICAgIC8qIGRpc3BsYXk6IG5vbmU7ICovXHJcbiAgfVxyXG5gO1xyXG5jb25zdCBSaWdodFdyYXBwZXIgPSBzdHlsZWQuZGl2YFxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgcG9zaXRpb246IGZpeGVkO1xyXG4gIGJvdHRvbTogMzZweDtcclxuICB6LWluZGV4OiA5MDtcclxuICB0cmFuc2l0aW9uOiBvcGFjaXR5IDI1MG1zIGVhc2UtaW4tb3V0O1xyXG4gIC5saW5rIHtcclxuICAgICYuZmlyc3Qge1xyXG4gICAgICAmOmxhc3Qtb2YtdHlwZSB7XHJcbiAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgICB9XHJcbiAgICAgICY6Zmlyc3Qtb2YtdHlwZSB7XHJcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAxODBweDtcclxuICAgICAgICBhIHtcclxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xyXG4gICAgICAgICAgJjpiZWZvcmUge1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZjNDAwO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIC8qIGJvcmRlcjoxcHggc29saWQgI2ZmZjsgKi9cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgICYubGFzdCB7XHJcbiAgICAgICY6Zmlyc3Qtb2YtdHlwZSB7XHJcbiAgICAgICAgb3BhY2l0eTogMDtcclxuICAgICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgICB9XHJcbiAgICAgICY6bGFzdC1vZi10eXBlIHtcclxuICAgICAgICBhIHtcclxuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xyXG4gICAgICAgICAgJjpiZWZvcmUge1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZjNDAwO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICBAbWVkaWEgKG1heC13aWR0aDogMTAyNHB4KSB7XHJcbiAgICBib3R0b206IDUycHg7XHJcbiAgICByaWdodDozNXB4O1xyXG4gICAgLmxpbmsge1xyXG4gICAgICBtYXJnaW4tcmlnaHQ6IDA7XHJcbiAgICAgICYuZmlyc3Qge1xyXG4gICAgICAgICY6Zmlyc3Qtb2YtdHlwZSB7XHJcbiAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgICY6bGFzdC1vZi10eXBlIHtcclxuICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgICYubGFzdCB7XHJcbiAgICAgICAgJjpmaXJzdC1vZi10eXBlIHtcclxuICAgICAgICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAmLmF0LWJvdHRvbSB7XHJcbiAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICB9XHJcbiAgfVxyXG5gO1xyXG5jb25zdCBDb250YWN0Q29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMjRweCkge1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICB9XHJcbmA7XHJcbmNvbnN0IEFkZHJlc3MgPSBzdHlsZWQuYWBcclxuICBmb250LXdlaWdodDogMzAwO1xyXG4gIGZvbnQtc2l6ZTogMTZweDtcclxuICBsaW5lLWhlaWdodDogMjBweDtcclxuICBsZXR0ZXItc3BhY2luZzogMDtcclxuICBjdXJzb3I6IG5vbmU7XHJcbiAgdHJhbnNpdGlvbjogY29sb3IgMjUwbXMgZWFzZS1pbi1vdXQ7XHJcbiAgJjpob3ZlcixcclxuICAmOmZvY3VzIHtcclxuICAgIGNvbG9yOiAjZmZjNDAwO1xyXG4gIH1cclxuICBAbWVkaWEgKG1heC13aWR0aDogMTAyNHB4KSB7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xyXG4gIH1cclxuYDtcclxuY29uc3QgUGhvbmUgPSBzdHlsZWQoTGluaylgXHJcbiAgZm9udC13ZWlnaHQ6IDUwMDtcclxuICBsaW5lLWhlaWdodDogMjBweDtcclxuICBsZXR0ZXItc3BhY2luZzogMDtcclxuICBmb250LXNpemU6IDE2cHg7XHJcbiAgdHJhbnNpdGlvbjogY29sb3IgMjUwbXMgZWFzZS1pbi1vdXQ7XHJcbiAgY3Vyc29yOiBub25lO1xyXG4gICY6aG92ZXIsXHJcbiAgJjpmb2N1cyB7XHJcbiAgICBjb2xvcjogI2ZmYzQwMDtcclxuICB9XHJcbmA7XHJcbmNvbnN0IFJlZWxMaW5rID0gc3R5bGVkKExpbmspYFxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICB0b3A6IDA7XHJcbiAgbGVmdDogMDtcclxuICB3aWR0aDogMTAwJTtcclxuICBoZWlnaHQ6IDEwMCU7XHJcbiAgYm90dG9tOiAwO1xyXG4gIHJpZ2h0OiAwO1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBmb250LXNpemU6IDE0cHg7XHJcbiAgZm9udC13ZWlnaHQ6IDUwMDtcclxuICBsaW5lLWhlaWdodDogMTJweDtcclxuICBsZXR0ZXItc3BhY2luZzogMC44NHB4O1xyXG4gIG1hcmdpbjogYXV0bztcclxuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xyXG5gO1xyXG5jb25zdCBDaXJjbGVXcmFwcGVyID0gc3R5bGVkKExpbmspYFxyXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICBtYXJnaW4tcmlnaHQ6IDMwcHg7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogI2Y4ZjhmODtcclxuICBib3JkZXItcmFkaXVzOiAxMDAlO1xyXG4gIHdpZHRoOiAxMzBweDtcclxuICBoZWlnaHQ6IDEzMHB4O1xyXG4gICY6bGFzdC1vZi10eXBlIHtcclxuICAgIG1hcmdpbi1yaWdodDogMDtcclxuICB9XHJcbmA7XHJcbmNvbnN0IFNhbXBsZUxpbmsgPSBzdHlsZWQoTGluaylgXHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gIHRvcDogMDtcclxuICBsZWZ0OiAwO1xyXG4gIHdpZHRoOiAxMDAlO1xyXG4gIGhlaWdodDogMTAwJTtcclxuICBib3R0b206IDA7XHJcbiAgcmlnaHQ6IDA7XHJcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gIGZvbnQtc2l6ZTogMTRweDtcclxuICBmb250LXdlaWdodDogNTAwO1xyXG4gIGxpbmUtaGVpZ2h0OiAxNHB4O1xyXG4gIGxldHRlci1zcGFjaW5nOiAwLjg0cHg7XHJcbiAgd2lkdGg6IDcwJTtcclxuICBtYXJnaW46IGF1dG87XHJcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcclxuYDtcclxuY29uc3QgU29jaWFsQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgbWFyZ2luLXJpZ2h0OiA0OHB4O1xyXG4gIEBtZWRpYSAobWF4LXdpZHRoOiAxMDI0cHgpIHtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDA7XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgU3R5bGVkU29jaWFsTGluayA9IHN0eWxlZChMaW5rKWBcclxuICBmb250LXdlaWdodDogNTAwO1xyXG4gIGZvbnQtc2l6ZTogMTZweDtcclxuICBsZXR0ZXItc3BhY2luZzogMDtcclxuICBsaW5lLWhlaWdodDogMjBweDtcclxuICB0cmFuc2l0aW9uOiBjb2xvciAyNTBtcyBlYXNlLWluLW91dDtcclxuICAmOmhvdmVyLFxyXG4gICY6Zm9jdXMge1xyXG4gICAgY29sb3I6ICNmZmM0MDA7XHJcbiAgfVxyXG4gIEBtZWRpYSAobWF4LXdpZHRoOiAxMDI0cHgpIHtcclxuICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XHJcbiAgfVxyXG5gO1xyXG4iXX0= */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var BottomFooter=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e8kjvma9\",label:\"BottomFooter\"})( false?undefined:{name:\"1ondozg\",styles:\"display:flex;padding-left:114px;padding-right:114px;justify-content:space-between;padding-top:36px;padding-bottom:33px;align-items:center;position:relative;@media (max-width:1024px){padding:0;flex-direction:column;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var TopWrapper=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e8kjvma10\",label:\"TopWrapper\"})( false?undefined:{name:\"ejjpi9\",styles:\"background:#1d1d1d;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var BottomWrapper=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e8kjvma11\",label:\"BottomWrapper\"})( false?undefined:{name:\"1o96zx8\",styles:\"max-width:1440px;margin:auto;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var LeftContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e8kjvma12\",label:\"LeftContainer\"})( false?undefined:{name:\"hsupzj\",styles:\"display:flex;@media (max-width:1024px){justify-content:space-around;width:100%;flex-direction:column;justify-content:center;align-items:center;margin-top:40px;margin-bottom:40px;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var CenterContainer=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_link__WEBPACK_IMPORTED_MODULE_3__[\"default\"],{target:\"e8kjvma13\",label:\"CenterContainer\"})( false?undefined:{name:\"1e6mgwf\",styles:\"position:absolute;left:50%;@media (max-width:1024px){position:relative;background:#000;left:auto;width:100%;display:flex;justify-content:center;padding-top:40px;padding-bottom:40px;svg{path{fill:#fff;}}}svg{path{transition:fill 250ms ease-in-out;}}&:hover,&:focus{svg{path{fill:#ffc40a;}}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var RightContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e8kjvma14\",label:\"RightContainer\"})( false?undefined:{name:\"1vfwsgu\",styles:\"display:flex;max-width:1440px;margin:auto;bottom:0;left:0;width:72%;right:0;justify-content:flex-end;@media (max-width:1024px){}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var RightWrapper=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e8kjvma15\",label:\"RightWrapper\"})( false?undefined:{name:\"1ckndqs\",styles:\"display:flex;position:fixed;bottom:36px;z-index:90;transition:opacity 250ms ease-in-out;.link{&.first{&:last-of-type{opacity:0;display:none;}&:first-of-type{margin-right:180px;a{background-color:transparent;&:before{background-color:#ffc400;}}}}&.last{&:first-of-type{opacity:0;display:none;}&:last-of-type{a{background-color:transparent;&:before{background-color:#ffc400;}}}}}@media (max-width:1024px){bottom:52px;right:35px;.link{margin-right:0;&.first{&:first-of-type{margin-right:0;}&:last-of-type{display:none;}}&.last{&:first-of-type{display:none;}}}&.at-bottom{opacity:0;}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var ContactContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e8kjvma16\",label:\"ContactContainer\"})( false?undefined:{name:\"1kvfyj7\",styles:\"display:flex;flex-direction:column;@media (max-width:1024px){align-items:center;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Address=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"a\",{target:\"e8kjvma17\",label:\"Address\"})( false?undefined:{name:\"98x0bn\",styles:\"font-weight:300;font-size:16px;line-height:20px;letter-spacing:0;cursor:none;transition:color 250ms ease-in-out;&:hover,&:focus{color:#ffc400;}@media (max-width:1024px){margin-bottom:20px;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkU6XFxEZXZcXEZPUlRcXEZvcnRTdHVkaW8yMDE5XFxwYWNrYWdlc1xcbWFycy10aGVtZVxcc3JjXFxjb21wb25lbnRzXFxmb290ZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBNmdCd0IiLCJmaWxlIjoiRTpcXERldlxcRk9SVFxcRm9ydFN0dWRpbzIwMTlcXHBhY2thZ2VzXFxtYXJzLXRoZW1lXFxzcmNcXGNvbXBvbmVudHNcXGZvb3Rlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHsgY29ubmVjdCwgc3R5bGVkIH0gZnJvbSBcImZyb250aXR5XCI7XHJcbmltcG9ydCBMaW5rIGZyb20gXCIuL2xpbmtcIjtcclxuaW1wb3J0IENhcmQgZnJvbSBcIi4vcGFydGlhbHMvY2FyZFwiO1xyXG5pbXBvcnQgRm9vdGVyVmlkZW9QbGF5ZXIgZnJvbSBcIi4vcGFydGlhbHMvRm9vdGVyVmlkZW9QbGF5ZXJcIjtcclxuaW1wb3J0IENlbnRlcmVkQ2FyZCBmcm9tIFwiLi9wYXJ0aWFscy9jZW50ZXJlZENhcmRcIjtcclxuY2xhc3MgRm9vdGVyIGV4dGVuZHMgQ29tcG9uZW50IHtcclxuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xyXG4gICAgc3VwZXIocHJvcHMpO1xyXG4gIH1cclxuXHJcbiAgaXNPblNjcmVlbigpIHtcclxuICAgIC8qIGdldCB0aGUgZWxlbWVudHMgKi9cclxuICAgIHZhciBlbGVtZW50cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoXCJzcHlcIik7XHJcbiAgICAvKiBpdGVyYXRlICovXHJcbiAgICBBcnJheS5wcm90b3R5cGUuZm9yRWFjaC5jYWxsKGVsZW1lbnRzLCBmdW5jdGlvbihlbGVtZW50LCBpbmRleCkge1xyXG4gICAgICB2YXIgYm91bmRzID0gZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuXHJcbiAgICAgIGlmIChib3VuZHMudG9wIDwgd2luZG93LmlubmVySGVpZ2h0ICYmIGJvdW5kcy5ib3R0b20gPiAwKSB7XHJcbiAgICAgICAgZWxlbWVudC5jbGFzc0xpc3QuYWRkKFwiaW52aWV3XCIpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShcImludmlld1wiKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgd2luZG93LnNldFRpbWVvdXQodGhpcy5pc09uU2NyZWVuLmJpbmQodGhpcyksIDI1MCk7XHJcbiAgfVxyXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xyXG4gICAgd2luZG93LnNldFRpbWVvdXQodGhpcy5pc09uU2NyZWVuLmJpbmQodGhpcyksIDI1MCk7ICBcclxuICAgIHdpbmRvdy5vbnNjcm9sbCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgc3RpY2t5Zm9vdGVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNzdHVja1wiKTtcclxuICAgICAgdmFyIHBhZ2VIZWlnaHQgPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQub2Zmc2V0SGVpZ2h0LFxyXG4gICAgICAgIHdpbmRvd0hlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCxcclxuICAgICAgICBzY3JvbGxQb3NpdGlvbiA9XHJcbiAgICAgICAgICB3aW5kb3cuc2Nyb2xsWSB8fFxyXG4gICAgICAgICAgd2luZG93LnBhZ2VZT2Zmc2V0IHx8XHJcbiAgICAgICAgICBkb2N1bWVudC5ib2R5LnNjcm9sbFRvcCArXHJcbiAgICAgICAgICAgICgoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3ApIHx8XHJcbiAgICAgICAgICAgICAgMCk7XHJcblxyXG5cclxuICAgICAgaWYgKHBhZ2VIZWlnaHQgPD0gd2luZG93SGVpZ2h0ICsgc2Nyb2xsUG9zaXRpb24pIHtcclxuICAgICAgICAgc3RpY2t5Zm9vdGVyLmNsYXNzTGlzdC5hZGQoXCJhdC1ib3R0b21cIik7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgc3RpY2t5Zm9vdGVyLmNsYXNzTGlzdC5yZW1vdmUoXCJhdC1ib3R0b21cIik7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG4gIHJlbmRlcigpIHtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLnByb3BzLnN0YXRlLnNvdXJjZS5nZXQoXCJhY2Ytb3B0aW9ucy1wYWdlXCIpO1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgPEZvb3RlckNvbnRhaW5lcj5cclxuICAgICAgICA8VG9wV3JhcHBlcj5cclxuICAgICAgICAgIDxUb3BGb290ZXI+XHJcbiAgICAgICAgICAgIDxUb3V0IGNsYXNzTmFtZT1cInNweVwiPlxyXG4gICAgICAgICAgICAgIDxoND57b3B0aW9ucy5hY2YuZm9vdGVyX3NlY3Rpb24uaGlyZV9oZWFkbGluZX08L2g0PlxyXG4gICAgICAgICAgICAgIDxwXHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJwMVwiXHJcbiAgICAgICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17e1xyXG4gICAgICAgICAgICAgICAgICBfX2h0bWw6IG9wdGlvbnMuYWNmLmZvb3Rlcl9zZWN0aW9uLmhpcmVfYm9keVxyXG4gICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICA+PC9wPlxyXG4gICAgICAgICAgICAgIDxDYXJkXHJcbiAgICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxyXG4gICAgICAgICAgICAgICAgbGlua1VSTD1cIm1haWx0bzpwcm9qZWN0c0Bmb3J0eWVhaC5jb21cIlxyXG4gICAgICAgICAgICAgICAgbGlua1RleHQ9e29wdGlvbnMuYWNmLmZvb3Rlcl9zZWN0aW9uLmhpcmVfY3RhX3RleHR9XHJcbiAgICAgICAgICAgICAgPjwvQ2FyZD5cclxuICAgICAgICAgICAgPC9Ub3V0PlxyXG4gICAgICAgICAgICA8VG91dCBjbGFzc05hbWU9XCJzcHlcIj5cclxuICAgICAgICAgICAgICA8aDQ+e29wdGlvbnMuYWNmLmZvb3Rlcl9zZWN0aW9uLnJlcXVlc3Rfd29ya19oZWFkbGluZX08L2g0PlxyXG4gICAgICAgICAgICAgIDxwXHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU9XCJwMVwiXHJcbiAgICAgICAgICAgICAgICBkYW5nZXJvdXNseVNldElubmVySFRNTD17e1xyXG4gICAgICAgICAgICAgICAgICBfX2h0bWw6IG9wdGlvbnMuYWNmLmZvb3Rlcl9zZWN0aW9uLnJlcXVlc3Rfd29ya19ib2R5XHJcbiAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgID48L3A+XHJcbiAgICAgICAgICAgICAgPENhcmRcclxuICAgICAgICAgICAgICAgIGxpbmtVUkw9XCIvY29udGFjdFwiXHJcbiAgICAgICAgICAgICAgICBsaW5rVGV4dD17b3B0aW9ucy5hY2YuZm9vdGVyX3NlY3Rpb24ucmVxdWVzdF93b3JrX2N0YV90ZXh0fVxyXG4gICAgICAgICAgICAgID48L0NhcmQ+XHJcbiAgICAgICAgICAgIDwvVG91dD5cclxuICAgICAgICAgICAgPFRvdXQgY2xhc3NOYW1lPVwic3B5XCI+XHJcbiAgICAgICAgICAgICAgPGg0PntvcHRpb25zLmFjZi5mb290ZXJfc2VjdGlvbi5jYXJlZXJzX2hlYWRsaW5lfTwvaDQ+XHJcbiAgICAgICAgICAgICAgPHBcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInAxXCJcclxuICAgICAgICAgICAgICAgIGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7XHJcbiAgICAgICAgICAgICAgICAgIF9faHRtbDogb3B0aW9ucy5hY2YuZm9vdGVyX3NlY3Rpb24uY2FyZWVyc19ib2R5XHJcbiAgICAgICAgICAgICAgICB9fVxyXG4gICAgICAgICAgICAgID48L3A+XHJcbiAgICAgICAgICAgICAgPENhcmRcclxuICAgICAgICAgICAgICAgIGxpbmtVUkw9XCJtYWlsdG86Y2FyZWVyc0Bmb3J0eWVhaC5jb21cIlxyXG4gICAgICAgICAgICAgICAgbGlua1RleHQ9e29wdGlvbnMuYWNmLmZvb3Rlcl9zZWN0aW9uLmNhcmVlcnNfY3RhX3RleHR9XHJcbiAgICAgICAgICAgICAgPjwvQ2FyZD5cclxuICAgICAgICAgICAgPC9Ub3V0PlxyXG4gICAgICAgICAgPC9Ub3BGb290ZXI+XHJcbiAgICAgICAgPC9Ub3BXcmFwcGVyPlxyXG4gICAgICAgIDxCb3R0b21XcmFwcGVyPlxyXG4gICAgICAgICAgPEJvdHRvbUZvb3Rlcj5cclxuICAgICAgICAgICAgPENlbnRlckNvbnRhaW5lciBsaW5rPVwiL1wiPlxyXG4gICAgICAgICAgICAgIDxzdmdcclxuICAgICAgICAgICAgICAgIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIlxyXG4gICAgICAgICAgICAgICAgd2lkdGg9XCIyNC40NjNcIlxyXG4gICAgICAgICAgICAgICAgaGVpZ2h0PVwiNTIuMjI3XCJcclxuICAgICAgICAgICAgICAgIHZpZXdCb3g9XCIwIDAgMjQuNDYzIDUyLjIyN1wiXHJcbiAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgPHBhdGhcclxuICAgICAgICAgICAgICAgICAgaWQ9XCJsb2dvLWZfc2hvcnRcIlxyXG4gICAgICAgICAgICAgICAgICBkPVwiTTIzLjE2OSw0My4wMTFIMHY5LjIxNkgyMy4xNjlabS0xMi44LTMzLjhIMjQuNDYzVjBIMFYzMy44SDEwLjM2OVYyMy44MTJoMTIuOFYxNC41OTNoLTEyLjhaXCJcclxuICAgICAgICAgICAgICAgICAgZmlsbD1cIiMxZDFkMWRcIlxyXG4gICAgICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgICA8L3N2Zz5cclxuICAgICAgICAgICAgPC9DZW50ZXJDb250YWluZXI+XHJcbiAgICAgICAgICAgIDxMZWZ0Q29udGFpbmVyPlxyXG4gICAgICAgICAgICAgIDxTb2NpYWxDb250YWluZXI+XHJcbiAgICAgICAgICAgICAgICA8U3R5bGVkU29jaWFsTGlua1xyXG4gICAgICAgICAgICAgICAgICB0YXJnZXQ9e29wdGlvbnMuYWNmLnNvY2lhbF9zZWN0aW9uLmluc3RhZ3JhbS50YXJnZXR9XHJcbiAgICAgICAgICAgICAgICAgIGxpbms9e29wdGlvbnMuYWNmLnNvY2lhbF9zZWN0aW9uLmluc3RhZ3JhbS51cmx9XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgIHtvcHRpb25zLmFjZi5zb2NpYWxfc2VjdGlvbi5pbnN0YWdyYW0udGl0bGV9XHJcbiAgICAgICAgICAgICAgICA8L1N0eWxlZFNvY2lhbExpbms+XHJcbiAgICAgICAgICAgICAgICA8U3R5bGVkU29jaWFsTGlua1xyXG4gICAgICAgICAgICAgICAgICB0YXJnZXQ9e29wdGlvbnMuYWNmLnNvY2lhbF9zZWN0aW9uLmRyaWJibGUudGFyZ2V0fVxyXG4gICAgICAgICAgICAgICAgICBsaW5rPXtvcHRpb25zLmFjZi5zb2NpYWxfc2VjdGlvbi5kcmliYmxlLnVybH1cclxuICAgICAgICAgICAgICAgID5cclxuICAgICAgICAgICAgICAgICAge29wdGlvbnMuYWNmLnNvY2lhbF9zZWN0aW9uLmRyaWJibGUudGl0bGV9XHJcbiAgICAgICAgICAgICAgICA8L1N0eWxlZFNvY2lhbExpbms+XHJcbiAgICAgICAgICAgICAgICA8U3R5bGVkU29jaWFsTGlua1xyXG4gICAgICAgICAgICAgICAgICB0YXJnZXQ9e29wdGlvbnMuYWNmLnNvY2lhbF9zZWN0aW9uLmxpbmtlZGluLnRhcmdldH1cclxuICAgICAgICAgICAgICAgICAgbGluaz17b3B0aW9ucy5hY2Yuc29jaWFsX3NlY3Rpb24ubGlua2VkaW4udXJsfVxyXG4gICAgICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgICB7b3B0aW9ucy5hY2Yuc29jaWFsX3NlY3Rpb24ubGlua2VkaW4udGl0bGV9XHJcbiAgICAgICAgICAgICAgICA8L1N0eWxlZFNvY2lhbExpbms+XHJcbiAgICAgICAgICAgICAgPC9Tb2NpYWxDb250YWluZXI+XHJcbiAgICAgICAgICAgICAgPENvbnRhY3RDb250YWluZXI+XHJcbiAgICAgICAgICAgICAgICA8QWRkcmVzc1xyXG4gICAgICAgICAgICAgICAgICBocmVmPXsnaHR0cHM6Ly93d3cuZ29vZ2xlLmNvbS9tYXBzL3BsYWNlLycgKyBvcHRpb25zLmFjZi5zb2NpYWxfc2VjdGlvbi5hZGRyZXNzcmVwbGFjZSgvPFtePl0qPj8vZ20sICcnKX1cclxuICAgICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcclxuICAgICAgICAgICAgICAgICAgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3tcclxuICAgICAgICAgICAgICAgICAgICBfX2h0bWw6IG9wdGlvbnMuYWNmLnNvY2lhbF9zZWN0aW9uLmFkZHJlc3NcclxuICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgID48L0FkZHJlc3M+XHJcbiAgICAgICAgICAgICAgICA8UGhvbmVcclxuICAgICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcclxuICAgICAgICAgICAgICAgICAgbGluaz17XCJ0ZWw6XCIgKyBvcHRpb25zLmFjZi5zb2NpYWxfc2VjdGlvbi5waG9uZV9udW1iZXJfZmllbGR9XHJcbiAgICAgICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICAgIHtvcHRpb25zLmFjZi5zb2NpYWxfc2VjdGlvbi5waG9uZV9udW1iZXJfZmllbGR9XHJcbiAgICAgICAgICAgICAgICA8L1Bob25lPlxyXG4gICAgICAgICAgICAgIDwvQ29udGFjdENvbnRhaW5lcj5cclxuICAgICAgICAgICAgPC9MZWZ0Q29udGFpbmVyPlxyXG4gICAgICAgICAgICA8UmlnaHRDb250YWluZXI+XHJcbiAgICAgICAgICAgICAgPFJpZ2h0V3JhcHBlciBpZD1cInN0dWNrXCIgY2xhc3NOYW1lPXt0aGlzLnByb3BzLmFjdGl2ZVRvdXR9PlxyXG4gICAgICAgICAgICAgICAgPFN0eWxlZENhcmRcclxuICAgICAgICAgICAgICAgICAgbGlua1VSTD1cIi9yZWVsXCJcclxuICAgICAgICAgICAgICAgICAgYWN0aXZlVG91dD17dGhpcy5wcm9wcy5hY3RpdmVUb3V0fVxyXG4gICAgICAgICAgICAgICAgICBsaW5rVGV4dD17b3B0aW9ucy5hY2YuZm9vdGVyX2N0YV90ZXh0LnJlZWxfdGV4dH1cclxuICAgICAgICAgICAgICAgID48L1N0eWxlZENhcmQ+XHJcbiAgICAgICAgICAgICAgICB7LyogPFN0eWxlZFZpZGVvUGxheWVyXHJcbiAgICAgICAgICAgICAgICAgIHRvZ2dsZT17dGhpcy5wcm9wcy5zdGF0ZX1cclxuICAgICAgICAgICAgICAgICAgc3JjPXtvcHRpb25zLmFjZi52aWRlb1tcInVybFwiXX1cclxuICAgICAgICAgICAgICAgIC8+ICovfVxyXG4gICAgICAgICAgICAgICAgPFN0eWxlZENhcmRcclxuICAgICAgICAgICAgICAgICAgbGlua1VSTD1cIi9jb250YWN0XCJcclxuICAgICAgICAgICAgICAgICAgYWN0aXZlVG91dD17dGhpcy5wcm9wcy5hY3RpdmVUb3V0fVxyXG4gICAgICAgICAgICAgICAgICBsaW5rVGV4dD17b3B0aW9ucy5hY2YuZm9vdGVyX2N0YV90ZXh0Lndvcmtfc2FtcGxlX2Zvcm1fdGV4dH1cclxuICAgICAgICAgICAgICAgID48L1N0eWxlZENhcmQ+XHJcbiAgICAgICAgICAgICAgPC9SaWdodFdyYXBwZXI+XHJcbiAgICAgICAgICAgICAgPE5vdEZpeGVkQ29udGFpbmVyIGNsYXNzTmFtZT17dGhpcy5wcm9wcy5hY3RpdmVUb3V0fT5cclxuICAgICAgICAgICAgICAgIDxTdHlsZWRDYXJkXHJcbiAgICAgICAgICAgICAgICAgIGxpbmtVUkw9XCIvcmVlbFwiXHJcbiAgICAgICAgICAgICAgICAgIGFjdGl2ZVRvdXQ9e3RoaXMucHJvcHMuYWN0aXZlVG91dH1cclxuICAgICAgICAgICAgICAgICAgbGlua1RleHQ9e29wdGlvbnMuYWNmLmZvb3Rlcl9jdGFfdGV4dC5yZWVsX3RleHR9XHJcbiAgICAgICAgICAgICAgICA+PC9TdHlsZWRDYXJkPlxyXG5cclxuICAgICAgICAgICAgICAgIDxTdHlsZWRDYXJkXHJcbiAgICAgICAgICAgICAgICAgIGxpbmtVUkw9XCIvY29udGFjdFwiXHJcbiAgICAgICAgICAgICAgICAgIGFjdGl2ZVRvdXQ9e3RoaXMucHJvcHMuYWN0aXZlVG91dH1cclxuICAgICAgICAgICAgICAgICAgbGlua1RleHQ9e29wdGlvbnMuYWNmLmZvb3Rlcl9jdGFfdGV4dC53b3JrX3NhbXBsZV9mb3JtX3RleHR9XHJcbiAgICAgICAgICAgICAgICA+PC9TdHlsZWRDYXJkPlxyXG4gICAgICAgICAgICAgIDwvTm90Rml4ZWRDb250YWluZXI+XHJcbiAgICAgICAgICAgIDwvUmlnaHRDb250YWluZXI+XHJcbiAgICAgICAgICA8L0JvdHRvbUZvb3Rlcj5cclxuICAgICAgICA8L0JvdHRvbVdyYXBwZXI+XHJcbiAgICAgIDwvRm9vdGVyQ29udGFpbmVyPlxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNvbm5lY3QoRm9vdGVyKTtcclxuXHJcbmNvbnN0IENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgd2lkdGg6IDE0NDBweDtcclxuICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxuICBwYWRkaW5nOiAyNHB4IDA7XHJcbiAgZGlzcGxheTogZmxleDtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWFyb3VuZDtcclxuICBtYXJnaW46IGF1dG87XHJcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMjRweCkge1xyXG4gICAgd2lkdGg6IGF1dG87XHJcbiAgfVxyXG5gO1xyXG5cclxuY29uc3QgVGl0bGUgPSBzdHlsZWQuaDJgXHJcbiAgbWFyZ2luOiAwO1xyXG4gIG1hcmdpbi1ib3R0b206IDE2cHg7XHJcbmA7XHJcbmNvbnN0IFN0eWxlZENhcmQgPSBzdHlsZWQoQ2VudGVyZWRDYXJkKWBcclxuICBtYXJnaW4tcmlnaHQ6IDEwcHg7XHJcbmA7XHJcblxyXG5jb25zdCBTdHlsZWRMaW5rID0gc3R5bGVkKExpbmspYFxyXG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcclxuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xyXG5gO1xyXG5jb25zdCBGb290ZXJDb250YWluZXIgPSBzdHlsZWQuZGl2YGA7XHJcbmNvbnN0IE5vdEZpeGVkQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIC5saW5rIHtcclxuICAgICYuZmlyc3Qge1xyXG4gICAgICAmOmZpcnN0LW9mLXR5cGUge1xyXG4gICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgICYubGFzdCB7XHJcbiAgICAgICY6bGFzdC1vZi10eXBlIHtcclxuICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIEBtZWRpYSAobWF4LXdpZHRoOiAxMDI0cHgpIHtcclxuICAgIGRpc3BsYXk6IG5vbmU7XHJcbiAgfVxyXG5gO1xyXG5jb25zdCBUb3BGb290ZXIgPSBzdHlsZWQuZGl2YFxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgbWF4LXdpZHRoOiAxNDQwcHg7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgbWFyZ2luOiBhdXRvO1xyXG4gIHBhZGRpbmctdG9wOiAxMjVweDtcclxuICBwYWRkaW5nLWJvdHRvbTogMTI1cHg7XHJcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG4gIEBtZWRpYSAobWF4LXdpZHRoOiAxMDI0cHgpIHtcclxuICAgIGZsZXgtd3JhcDogd3JhcDtcclxuICAgIHBhZGRpbmctbGVmdDogNjBweDtcclxuICAgIHBhZGRpbmctcmlnaHQ6IDYwcHg7XHJcbiAgICB3aWR0aDogYXV0bztcclxuICB9XHJcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDQ4MHB4KSB7XHJcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gICAgcGFkZGluZzogMDtcclxuICAgIHBhZGRpbmctdG9wOiA2MHB4O1xyXG4gICAgcGFkZGluZy1ib3R0b206IDYwcHg7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICB9XHJcbmA7XHJcbmNvbnN0IFN0eWxlZFZpZGVvUGxheWVyID0gc3R5bGVkKEZvb3RlclZpZGVvUGxheWVyKWBcclxuICAvKiB6LWluZGV4OjEwMDsgKi9cclxuYDtcclxuY29uc3QgVG91dCA9IHN0eWxlZC5kaXZgXHJcbiAgY29sb3I6ICNmZmZmZmY7XHJcbiAgd2lkdGg6IGNhbGMoNzAlIC8gMyk7XHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gIHBhZGRpbmctbGVmdDogMjFweDtcclxuXHJcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gIC5saW5rIHtcclxuICAgIHotaW5kZXg6IDY7XHJcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICBib3R0b206IC0xMTBweDtcclxuICAgIGxlZnQ6IDAlO1xyXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0xNSUpO1xyXG4gICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTE1JSk7XHJcbiAgICBib3JkZXItcmFkaXVzOiA1MCU7XHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTAyNHB4KSB7XHJcbiAgICAgIGEge1xyXG4gICAgICAgIGhlaWdodDogYXV0bztcclxuICAgICAgICB3aWR0aDogYXV0bztcclxuICAgICAgfVxyXG4gICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgIHRyYW5zZm9ybTogbm9uZTtcclxuICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IG5vbmU7XHJcbiAgICAgIGJvdHRvbTogYXV0bztcclxuICAgICAgaGVpZ2h0OiA1MXB4O1xyXG4gICAgICB3aWR0aDogYXV0bztcclxuICAgIH1cclxuICAgICYuZmlyc3Qge1xyXG4gICAgfVxyXG4gIH1cclxuICBwIHtcclxuICAgIGNvbG9yOiAjZmZmZmZmO1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMTVweDtcclxuICAgIG1heC13aWR0aDogOTUlO1xyXG4gIH1cclxuICBoNCB7XHJcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xyXG4gICAgbGluZS1oZWlnaHQ6IDIwcHg7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAxMnB4O1xyXG4gIH1cclxuICBhIHtcclxuICAgIGxldHRlci1zcGFjaW5nOiAwLjg0cHg7XHJcbiAgICBwYWRkaW5nLXRvcDogNXB4O1xyXG4gIH1cclxuICAmOmJlZm9yZSB7XHJcbiAgICB3aWR0aDogMXB4O1xyXG4gICAgY29udGVudDogXCJcIjtcclxuICAgIGhlaWdodDogMTE1JTtcclxuICAgIGxlZnQ6IDA7XHJcbiAgICBiYWNrZ3JvdW5kOiAjZmZjNDBhO1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMjRweCkge1xyXG4gICAgICBoZWlnaHQ6IDkwJTtcclxuICAgIH1cclxuICB9XHJcbiAgJjpmaXJzdC1vZi10eXBlIHtcclxuICAgIG1hcmdpbi1sZWZ0OiAxMTRweDtcclxuICAgIC5saW5rIHtcclxuICAgICAgLyogdHJhbnNmb3JtOiB0cmFuc2xhdGVYKDE1JSk7ICovXHJcbiAgICB9XHJcbiAgICBAbWVkaWEgKG1heC13aWR0aDogMTAyNHB4KSB7XHJcbiAgICAgIC5saW5rIHtcclxuICAgICAgICB0cmFuc2Zvcm06IG5vbmU7XHJcbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IG5vbmVcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICAmOmxhc3Qtb2YtdHlwZSB7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDExNHB4O1xyXG4gICAgLmxpbmsge1xyXG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTIxJSk7XHJcbiAgICAgIC13ZWJraXQtdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0yMSUpO1xyXG4gICAgfVxyXG4gIH1cclxuICAvKiAmOmhvdmVyIHtcclxuICAgIGEge1xyXG4gICAgICBjb2xvcjogIzFkMWQxZDtcclxuICAgIH1cclxuICB9ICovXHJcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMjRweCkge1xyXG4gICAgd2lkdGg6IGNhbGMoOTAlIC8gMik7XHJcbiAgICBtYXJnaW4tYm90dG9tOiA2MHB4O1xyXG4gICAgbWFyZ2luLWxlZnQ6IDA7XHJcbiAgICAmOmZpcnN0LW9mLXR5cGUge1xyXG4gICAgICBtYXJnaW4tbGVmdDogMDtcclxuICAgICAgbWFyZ2luLWxlZnQ6IDA7XHJcbiAgICB9XHJcbiAgICAmOmxhc3Qtb2YtdHlwZSB7XHJcbiAgICAgIG1hcmdpbi1yaWdodDogMDtcclxuICAgICAgbWFyZ2luLWJvdHRvbTogMDtcclxuICAgICAgLmxpbmsge1xyXG4gICAgICAgIHRyYW5zZm9ybTogbm9uZTtcclxuICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTpub25lO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIEBtZWRpYSAobWF4LXdpZHRoOiA0ODBweCkge1xyXG4gICAgd2lkdGg6IDgwJTtcclxuICAgIG1hcmdpbi1ib3R0b206IDYwcHg7XHJcbiAgICBtYXJnaW4tbGVmdDogMzZweDtcclxuICAgICY6Zmlyc3Qtb2YtdHlwZSB7XHJcbiAgICAgIG1hcmdpbi1sZWZ0OiAwO1xyXG4gICAgICBtYXJnaW4tbGVmdDogMzZweDtcclxuICAgIH1cclxuICAgICY6bGFzdC1vZi10eXBlIHtcclxuICAgICAgbWFyZ2luLXJpZ2h0OiAwO1xyXG4gICAgICBtYXJnaW4tYm90dG9tOiAwO1xyXG4gICAgICAubGluayB7XHJcbiAgICAgICAgdHJhbnNmb3JtOiBub25lO1xyXG4gICAgICAgIC13ZWJraXQtdHJhbnNmb3JtOm5vbmU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbmA7XHJcblxyXG5jb25zdCBCb3R0b21Gb290ZXIgPSBzdHlsZWQuZGl2YFxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgcGFkZGluZy1sZWZ0OiAxMTRweDtcclxuICBwYWRkaW5nLXJpZ2h0OiAxMTRweDtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XHJcbiAgcGFkZGluZy10b3A6IDM2cHg7XHJcbiAgcGFkZGluZy1ib3R0b206IDMzcHg7XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMjRweCkge1xyXG4gICAgcGFkZGluZzogMDtcclxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgfVxyXG5gO1xyXG5jb25zdCBUb3BXcmFwcGVyID0gc3R5bGVkLmRpdmBcclxuICBiYWNrZ3JvdW5kOiAjMWQxZDFkO1xyXG5gO1xyXG5jb25zdCBCb3R0b21XcmFwcGVyID0gc3R5bGVkLmRpdmBcclxuICBtYXgtd2lkdGg6IDE0NDBweDtcclxuICBtYXJnaW46IGF1dG87XHJcbmA7XHJcbmNvbnN0IExlZnRDb250YWluZXIgPSBzdHlsZWQuZGl2YFxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMjRweCkge1xyXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgICBtYXJnaW4tdG9wOiA0MHB4O1xyXG4gICAgbWFyZ2luLWJvdHRvbTogNDBweDtcclxuICB9XHJcbmA7XHJcbmNvbnN0IENlbnRlckNvbnRhaW5lciA9IHN0eWxlZChMaW5rKWBcclxuICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgbGVmdDogNTAlO1xyXG4gIEBtZWRpYSAobWF4LXdpZHRoOiAxMDI0cHgpIHtcclxuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgIGJhY2tncm91bmQ6ICMwMDA7XHJcbiAgICBsZWZ0OiBhdXRvO1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICBwYWRkaW5nLXRvcDogNDBweDtcclxuICAgIHBhZGRpbmctYm90dG9tOiA0MHB4O1xyXG4gICAgc3ZnIHtcclxuICAgICAgcGF0aCB7XHJcbiAgICAgICAgZmlsbDogI2ZmZjtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuICBzdmcge1xyXG4gICAgcGF0aCB7XHJcbiAgICAgIHRyYW5zaXRpb246IGZpbGwgMjUwbXMgZWFzZS1pbi1vdXQ7XHJcbiAgICB9XHJcbiAgfVxyXG4gICY6aG92ZXIsXHJcbiAgJjpmb2N1cyB7XHJcbiAgICBzdmcge1xyXG4gICAgICBwYXRoIHtcclxuICAgICAgICBmaWxsOiAjZmZjNDBhO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5gO1xyXG5jb25zdCBSaWdodENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgZGlzcGxheTogZmxleDtcclxuXHJcbiAgbWF4LXdpZHRoOiAxNDQwcHg7XHJcbiAgbWFyZ2luOiBhdXRvO1xyXG4gIGJvdHRvbTogMDtcclxuICBsZWZ0OiAwO1xyXG4gIHdpZHRoOiA3MiU7XHJcbiAgcmlnaHQ6IDA7XHJcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcclxuICBAbWVkaWEgKG1heC13aWR0aDogMTAyNHB4KSB7XHJcbiAgICAvKiBkaXNwbGF5OiBub25lOyAqL1xyXG4gIH1cclxuYDtcclxuY29uc3QgUmlnaHRXcmFwcGVyID0gc3R5bGVkLmRpdmBcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIHBvc2l0aW9uOiBmaXhlZDtcclxuICBib3R0b206IDM2cHg7XHJcbiAgei1pbmRleDogOTA7XHJcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAyNTBtcyBlYXNlLWluLW91dDtcclxuICAubGluayB7XHJcbiAgICAmLmZpcnN0IHtcclxuICAgICAgJjpsYXN0LW9mLXR5cGUge1xyXG4gICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgZGlzcGxheTogbm9uZTtcclxuICAgICAgfVxyXG4gICAgICAmOmZpcnN0LW9mLXR5cGUge1xyXG4gICAgICAgIG1hcmdpbi1yaWdodDogMTgwcHg7XHJcbiAgICAgICAgYSB7XHJcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcclxuICAgICAgICAgICY6YmVmb3JlIHtcclxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmYzQwMDtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvKiBib3JkZXI6MXB4IHNvbGlkICNmZmY7ICovXHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAmLmxhc3Qge1xyXG4gICAgICAmOmZpcnN0LW9mLXR5cGUge1xyXG4gICAgICAgIG9wYWNpdHk6IDA7XHJcbiAgICAgICAgZGlzcGxheTogbm9uZTtcclxuICAgICAgfVxyXG4gICAgICAmOmxhc3Qtb2YtdHlwZSB7XHJcbiAgICAgICAgYSB7XHJcbiAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcclxuICAgICAgICAgICY6YmVmb3JlIHtcclxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogI2ZmYzQwMDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMjRweCkge1xyXG4gICAgYm90dG9tOiA1MnB4O1xyXG4gICAgcmlnaHQ6MzVweDtcclxuICAgIC5saW5rIHtcclxuICAgICAgbWFyZ2luLXJpZ2h0OiAwO1xyXG4gICAgICAmLmZpcnN0IHtcclxuICAgICAgICAmOmZpcnN0LW9mLXR5cGUge1xyXG4gICAgICAgICAgbWFyZ2luLXJpZ2h0OiAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICAmOmxhc3Qtb2YtdHlwZSB7XHJcbiAgICAgICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICAmLmxhc3Qge1xyXG4gICAgICAgICY6Zmlyc3Qtb2YtdHlwZSB7XHJcbiAgICAgICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgJi5hdC1ib3R0b20ge1xyXG4gICAgICBvcGFjaXR5OiAwO1xyXG4gICAgfVxyXG4gIH1cclxuYDtcclxuY29uc3QgQ29udGFjdENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIEBtZWRpYSAobWF4LXdpZHRoOiAxMDI0cHgpIHtcclxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgfVxyXG5gO1xyXG5jb25zdCBBZGRyZXNzID0gc3R5bGVkLmFgXHJcbiAgZm9udC13ZWlnaHQ6IDMwMDtcclxuICBmb250LXNpemU6IDE2cHg7XHJcbiAgbGluZS1oZWlnaHQ6IDIwcHg7XHJcbiAgbGV0dGVyLXNwYWNpbmc6IDA7XHJcbiAgY3Vyc29yOiBub25lO1xyXG4gIHRyYW5zaXRpb246IGNvbG9yIDI1MG1zIGVhc2UtaW4tb3V0O1xyXG4gICY6aG92ZXIsXHJcbiAgJjpmb2N1cyB7XHJcbiAgICBjb2xvcjogI2ZmYzQwMDtcclxuICB9XHJcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDEwMjRweCkge1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMjBweDtcclxuICB9XHJcbmA7XHJcbmNvbnN0IFBob25lID0gc3R5bGVkKExpbmspYFxyXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XHJcbiAgbGluZS1oZWlnaHQ6IDIwcHg7XHJcbiAgbGV0dGVyLXNwYWNpbmc6IDA7XHJcbiAgZm9udC1zaXplOiAxNnB4O1xyXG4gIHRyYW5zaXRpb246IGNvbG9yIDI1MG1zIGVhc2UtaW4tb3V0O1xyXG4gIGN1cnNvcjogbm9uZTtcclxuICAmOmhvdmVyLFxyXG4gICY6Zm9jdXMge1xyXG4gICAgY29sb3I6ICNmZmM0MDA7XHJcbiAgfVxyXG5gO1xyXG5jb25zdCBSZWVsTGluayA9IHN0eWxlZChMaW5rKWBcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgdG9wOiAwO1xyXG4gIGxlZnQ6IDA7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgaGVpZ2h0OiAxMDAlO1xyXG4gIGJvdHRvbTogMDtcclxuICByaWdodDogMDtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgZm9udC1zaXplOiAxNHB4O1xyXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XHJcbiAgbGluZS1oZWlnaHQ6IDEycHg7XHJcbiAgbGV0dGVyLXNwYWNpbmc6IDAuODRweDtcclxuICBtYXJnaW46IGF1dG87XHJcbiAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcclxuYDtcclxuY29uc3QgQ2lyY2xlV3JhcHBlciA9IHN0eWxlZChMaW5rKWBcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgbWFyZ2luLXJpZ2h0OiAzMHB4O1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICNmOGY4Zjg7XHJcbiAgYm9yZGVyLXJhZGl1czogMTAwJTtcclxuICB3aWR0aDogMTMwcHg7XHJcbiAgaGVpZ2h0OiAxMzBweDtcclxuICAmOmxhc3Qtb2YtdHlwZSB7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDA7XHJcbiAgfVxyXG5gO1xyXG5jb25zdCBTYW1wbGVMaW5rID0gc3R5bGVkKExpbmspYFxyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICB0b3A6IDA7XHJcbiAgbGVmdDogMDtcclxuICB3aWR0aDogMTAwJTtcclxuICBoZWlnaHQ6IDEwMCU7XHJcbiAgYm90dG9tOiAwO1xyXG4gIHJpZ2h0OiAwO1xyXG4gIHRleHQtYWxpZ246IGNlbnRlcjtcclxuICBmb250LXNpemU6IDE0cHg7XHJcbiAgZm9udC13ZWlnaHQ6IDUwMDtcclxuICBsaW5lLWhlaWdodDogMTRweDtcclxuICBsZXR0ZXItc3BhY2luZzogMC44NHB4O1xyXG4gIHdpZHRoOiA3MCU7XHJcbiAgbWFyZ2luOiBhdXRvO1xyXG4gIHRleHQtdHJhbnNmb3JtOiB1cHBlcmNhc2U7XHJcbmA7XHJcbmNvbnN0IFNvY2lhbENvbnRhaW5lciA9IHN0eWxlZC5kaXZgXHJcbiAgZGlzcGxheTogZmxleDtcclxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xyXG4gIG1hcmdpbi1yaWdodDogNDhweDtcclxuICBAbWVkaWEgKG1heC13aWR0aDogMTAyNHB4KSB7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gICAgbWFyZ2luLXJpZ2h0OiAwO1xyXG4gIH1cclxuYDtcclxuXHJcbmNvbnN0IFN0eWxlZFNvY2lhbExpbmsgPSBzdHlsZWQoTGluaylgXHJcbiAgZm9udC13ZWlnaHQ6IDUwMDtcclxuICBmb250LXNpemU6IDE2cHg7XHJcbiAgbGV0dGVyLXNwYWNpbmc6IDA7XHJcbiAgbGluZS1oZWlnaHQ6IDIwcHg7XHJcbiAgdHJhbnNpdGlvbjogY29sb3IgMjUwbXMgZWFzZS1pbi1vdXQ7XHJcbiAgJjpob3ZlcixcclxuICAmOmZvY3VzIHtcclxuICAgIGNvbG9yOiAjZmZjNDAwO1xyXG4gIH1cclxuICBAbWVkaWEgKG1heC13aWR0aDogMTAyNHB4KSB7XHJcbiAgICBtYXJnaW4tYm90dG9tOiAyMHB4O1xyXG4gIH1cclxuYDtcclxuIl19 */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Phone=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_link__WEBPACK_IMPORTED_MODULE_3__[\"default\"],{target:\"e8kjvma18\",label:\"Phone\"})( false?undefined:{name:\"n8idqb\",styles:\"font-weight:500;line-height:20px;letter-spacing:0;font-size:16px;transition:color 250ms ease-in-out;cursor:none;&:hover,&:focus{color:#ffc400;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var ReelLink=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_link__WEBPACK_IMPORTED_MODULE_3__[\"default\"],{target:\"e8kjvma19\",label:\"ReelLink\"})( false?undefined:{name:\"1muei05\",styles:\"display:flex;flex-direction:column;align-items:center;justify-content:center;position:absolute;top:0;left:0;width:100%;height:100%;bottom:0;right:0;text-align:center;font-size:14px;font-weight:500;line-height:12px;letter-spacing:0.84px;margin:auto;text-transform:uppercase;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var CircleWrapper=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_link__WEBPACK_IMPORTED_MODULE_3__[\"default\"],{target:\"e8kjvma20\",label:\"CircleWrapper\"})( false?undefined:{name:\"1tm3486\",styles:\"position:relative;margin-right:30px;background-color:#f8f8f8;border-radius:100%;width:130px;height:130px;&:last-of-type{margin-right:0;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var SampleLink=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_link__WEBPACK_IMPORTED_MODULE_3__[\"default\"],{target:\"e8kjvma21\",label:\"SampleLink\"})( false?undefined:{name:\"1n6r752\",styles:\"display:flex;flex-direction:column;align-items:center;justify-content:center;position:absolute;top:0;left:0;width:100%;height:100%;bottom:0;right:0;text-align:center;font-size:14px;font-weight:500;line-height:14px;letter-spacing:0.84px;width:70%;margin:auto;text-transform:uppercase;\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var SocialContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e8kjvma22\",label:\"SocialContainer\"})( false?undefined:{name:\"1olsj5n\",styles:\"display:flex;flex-direction:column;margin-right:48px;@media (max-width:1024px){align-items:center;margin-right:0;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var StyledSocialLink=/*#__PURE__*/Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(_link__WEBPACK_IMPORTED_MODULE_3__[\"default\"],{target:\"e8kjvma23\",label:\"StyledSocialLink\"})( false?undefined:{name:\"mvs5ke\",styles:\"font-weight:500;font-size:16px;letter-spacing:0;line-height:20px;transition:color 250ms ease-in-out;&:hover,&:focus{color:#ffc400;}@media (max-width:1024px){margin-bottom:20px;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/mars-theme/src/components/footer.js\n");

/***/ }),

/***/ "./packages/mars-theme/src/components/partials/FooterVideoPlayer.js":
/*!**************************************************************************!*\
  !*** ./packages/mars-theme/src/components/partials/FooterVideoPlayer.js ***!
  \**************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @emotion/styled-base */ \"./node_modules/@emotion/styled-base/dist/styled-base.browser.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! frontity */ \"./node_modules/frontity/dist/index.js\");\n/* harmony import */ var frontity__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(frontity__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _emotion_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @emotion/core */ \"./node_modules/@emotion/core/dist/core.browser.esm.js\");\nfunction _defineProperty(obj,key,value){if(key in obj){Object.defineProperty(obj,key,{value:value,enumerable:true,configurable:true,writable:true});}else{obj[key]=value;}return obj;}function _EMOTION_STRINGIFIED_CSS_ERROR__(){return\"You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).\";}class FooterVideoPlayer extends react__WEBPACK_IMPORTED_MODULE_1__[\"Component\"]{constructor(props){super(props);_defineProperty(this,\"componentWillUnmount\",()=>{this.stopVideo();});_defineProperty(this,\"playVideo\",()=>{// You can use the play method as normal on your video ref\nthis.refs.vidRef.play();this.setState({active:true});if(document.querySelector(\"#checkIfOpen\")){document.querySelector(\"#checkIfOpen\").classList.add(\"is-open\");}});_defineProperty(this,\"stopVideo\",()=>{this.refs.vidRef.pause();this.refs.vidRef.currentTime=0;this.setState({active:false});if(document.querySelector(\"#checkIfOpen\")){document.querySelector(\"#checkIfOpen\").classList.remove(\"is-open\");}});_defineProperty(this,\"pauseVideo\",()=>{if(this.refs.vidRef.paused){this.refs.vidRef.play();}else{this.refs.vidRef.pause();}});_defineProperty(this,\"onKeyPressed\",e=>{if(e.key===\"Escape\"){this.refs.vidRef.pause();this.refs.vidRef.currentTime=0;this.setState({active:false});}});_defineProperty(this,\"render\",()=>{return Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(Container,{className:[this.state.active,this.props.nav].join(\" \")},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(ButtonContainer,{\"data-stick-cursor\":true,className:this.state.active?\"active link\":\"\"},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(CloseButton,{onClick:this.stopVideo},\"Close\")),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(Video,{onKeyDown:this.onKeyPressed,tabIndex:\"0\",preload:\"none\",ref:\"vidRef\",src:this.props.src,type:\"video/mp4\",onClick:this.pauseVideo,onEnded:()=>this.stopVideo()// className={this.state.active ? \"active\" : \"\"}\n,className:\"\".concat(this.state.active?\"active\":\"\",\" videoOpen\")}),Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"div\",{className:\"link\",\"data-stick-cursor\":true},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(PlayButton,{className:[this.state.active,this.props.nav].join(\" \"),onClick:this.playVideo},Object(_emotion_core__WEBPACK_IMPORTED_MODULE_3__[\"jsx\"])(\"span\",null,\"Play Our Reel\"))));});this.state={active:false};}}/* harmony default export */ __webpack_exports__[\"default\"] = (FooterVideoPlayer);var Container=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e4jlvnd0\",label:\"Container\"})( false?undefined:{name:\"ut05qw\",styles:\"position:absolute;display:flex;flex-direction:column;justify-content:center;max-width:none;top:50%;left:50%;z-index:5;transform:translate(-50%,0%);&.true{z-index:90;height:100vh;width:100vw;top:0;left:0;transform:none;position:fixed;}&.nav{position:fixed;z-index:900;top:50%;transform:translate(-50%,0%);&.true{top:0;transform:translate(0%,0%);}@media (max-width:768px){transform:translate(-50%,0%);}}@media (max-width:768px){top:75%;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var Video=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"video\",{target:\"e4jlvnd1\",label:\"Video\"})( false?undefined:{name:\"1ukxwbq\",styles:\"object-fit:cover;height:100%;width:100%;position:absolute;top:0;left:0;z-index:1;display:none;&.active{display:flex;z-index:10;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var ButtonContainer=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"div\",{target:\"e4jlvnd2\",label:\"ButtonContainer\"})( false?undefined:{name:\"qr4477\",styles:\"max-width:1440px;width:100%;margin:auto;margin-top:0;display:none;position:relative;padding:24px 0;align-items:center;&.active{display:flex;}@media (max-width:768px){width:auto;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var PlayButton=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"button\",{target:\"e4jlvnd3\",label:\"PlayButton\"})( false?undefined:{name:\"n00k3s\",styles:\"width:fit-content;font-weight:500;line-height:51px;letter-spacing:0.84px;font-size:14px;text-transform:uppercase;-webkit-appearance:none;background:transparent;border:none;cursor:none;z-index:6;width:200px;height:200px;outline:none;position:relative;border-radius:100%;span{position:absolute;opacity:0;width:200px;height:200px;border-radius:100%;font-size:12px;font-weight:500;letter-spacing:0.84px;left:0;top:37.5%;color:#1d1d1d;}svg{animation-name:dots-spin;animation-iteration-count:infinite;animation-timing-function:linear;-webkit-animation-duration:2s;animation-duration:2s;-webkit-animation-fill-mode:both;animation-fill-mode:both;border-radius:50%;#Ellipse_8{fill:#fff;}}@keyframes dots-spin{from{box-shadow:0 0 0 10px rgba(255,196,0,0.301);}to{box-shadow:0 0 0 30px rgba(255,196,0,0);}}&:hover,&:focus,&:active{svg{opacity:0;}span{opacity:1;}@media (max-width:768px){span{background-color:#ffc400;width:130px;height:130px;max-width:none;justify-content:center;align-items:center;display:flex;flex-direction:column;left:-50%;top:-50%;}}}&.true{svg{display:none;}span{display:none;}}&.nav{svg{animation:none;}@media (max-width:768px){}}@media (max-width:768px){height:auto;width:auto;height:58.73px;padding:0;span{height:auto;width:auto;display:none;}}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});var CloseButton=Object(_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(\"button\",{target:\"e4jlvnd4\",label:\"CloseButton\"})( false?undefined:{name:\"1rokpb6\",styles:\"position:absolute;top:115px;right:65px;cursor:pointer !important;outline:none;width:130px;height:130px;border-radius:50%;font-weight:500;line-height:51px;letter-spacing:0.84px;font-size:12px;text-transform:uppercase;background:transparent;border:none;padding:0;display:flex;align-items:center;justify-content:center;-webkit-appearance:none;transition:color 250ms ease-in-out;z-index:900;color:#ffc40a;max-width:none;&:hover{}@media (max-width:768px){top:33px;right:8px;display:flex;width:100px;z-index:999;height:auto;position:fixed;}\",map:\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */\",toString:_EMOTION_STRINGIFIED_CSS_ERROR__});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./packages/mars-theme/src/components/partials/FooterVideoPlayer.js\n");

/***/ })

})